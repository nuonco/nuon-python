# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppOCIArtifact(BaseModel):
    """
    AppOCIArtifact
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = None
    architecture: Optional[StrictStr] = None
    artifact_type: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = None
    digest: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    media_type: Optional[StrictStr] = None
    org_id: Optional[StrictStr] = None
    os: Optional[StrictStr] = Field(default=None, description="Platform fields")
    os_features: Optional[List[StrictStr]] = None
    os_version: Optional[StrictStr] = None
    owner_id: Optional[StrictStr] = None
    owner_type: Optional[StrictStr] = None
    repository: Optional[StrictStr] = None
    size: Optional[StrictInt] = None
    tag: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    urls: Optional[List[StrictStr]] = None
    variant: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["annotations", "architecture", "artifact_type", "created_at", "created_by_id", "digest", "id", "media_type", "org_id", "os", "os_features", "os_version", "owner_id", "owner_type", "repository", "size", "tag", "updated_at", "urls", "variant"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppOCIArtifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppOCIArtifact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "architecture": obj.get("architecture"),
            "artifact_type": obj.get("artifact_type"),
            "created_at": obj.get("created_at"),
            "created_by_id": obj.get("created_by_id"),
            "digest": obj.get("digest"),
            "id": obj.get("id"),
            "media_type": obj.get("media_type"),
            "org_id": obj.get("org_id"),
            "os": obj.get("os"),
            "os_features": obj.get("os_features"),
            "os_version": obj.get("os_version"),
            "owner_id": obj.get("owner_id"),
            "owner_type": obj.get("owner_type"),
            "repository": obj.get("repository"),
            "size": obj.get("size"),
            "tag": obj.get("tag"),
            "updated_at": obj.get("updated_at"),
            "urls": obj.get("urls"),
            "variant": obj.get("variant")
        })
        return _obj


