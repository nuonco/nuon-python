# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppRunnerGroupSettings(BaseModel):
    """
    AppRunnerGroupSettings
    """ # noqa: E501
    aws_cloudformation_stack_type: Optional[StrictStr] = None
    aws_instance_type: Optional[StrictStr] = Field(default=None, description="aws runner specifics runner-v2")
    aws_max_instance_lifetime: Optional[StrictInt] = Field(default=None, description="Default: 7 days")
    aws_tags: Optional[Dict[str, StrictStr]] = None
    container_image_tag: Optional[StrictStr] = None
    container_image_url: Optional[StrictStr] = Field(default=None, description="configuration for deploying the runner")
    created_at: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = None
    enable_logging: Optional[StrictBool] = None
    enable_metrics: Optional[StrictBool] = None
    enable_sentry: Optional[StrictBool] = None
    groups: Optional[List[StrictStr]] = Field(default=None, description="the job loop groups the runner should poll for")
    heart_beat_timeout: Optional[StrictInt] = Field(default=None, description="Various settings for the runner to handle internally")
    id: Optional[StrictStr] = None
    local_aws_iam_role_arn: Optional[StrictStr] = None
    logging_level: Optional[StrictStr] = None
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Metadata is used as both log and metric tags/attributes in the runner when emitting data")
    org_aws_iam_role_arn: Optional[StrictStr] = Field(default=None, description="org runner specifics")
    org_id: Optional[StrictStr] = None
    org_k8s_service_account_name: Optional[StrictStr] = None
    otel_collector_config: Optional[StrictStr] = None
    platform: Optional[StrictStr] = Field(default=None, description="platform variable for use in the runner")
    runner_api_url: Optional[StrictStr] = None
    runner_group_id: Optional[StrictStr] = None
    sandbox_mode: Optional[StrictBool] = Field(default=None, description="configuration for managing the runner server side")
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["aws_cloudformation_stack_type", "aws_instance_type", "aws_max_instance_lifetime", "aws_tags", "container_image_tag", "container_image_url", "created_at", "created_by_id", "enable_logging", "enable_metrics", "enable_sentry", "groups", "heart_beat_timeout", "id", "local_aws_iam_role_arn", "logging_level", "metadata", "org_aws_iam_role_arn", "org_id", "org_k8s_service_account_name", "otel_collector_config", "platform", "runner_api_url", "runner_group_id", "sandbox_mode", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppRunnerGroupSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppRunnerGroupSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aws_cloudformation_stack_type": obj.get("aws_cloudformation_stack_type"),
            "aws_instance_type": obj.get("aws_instance_type"),
            "aws_max_instance_lifetime": obj.get("aws_max_instance_lifetime"),
            "aws_tags": obj.get("aws_tags"),
            "container_image_tag": obj.get("container_image_tag"),
            "container_image_url": obj.get("container_image_url"),
            "created_at": obj.get("created_at"),
            "created_by_id": obj.get("created_by_id"),
            "enable_logging": obj.get("enable_logging"),
            "enable_metrics": obj.get("enable_metrics"),
            "enable_sentry": obj.get("enable_sentry"),
            "groups": obj.get("groups"),
            "heart_beat_timeout": obj.get("heart_beat_timeout"),
            "id": obj.get("id"),
            "local_aws_iam_role_arn": obj.get("local_aws_iam_role_arn"),
            "logging_level": obj.get("logging_level"),
            "metadata": obj.get("metadata"),
            "org_aws_iam_role_arn": obj.get("org_aws_iam_role_arn"),
            "org_id": obj.get("org_id"),
            "org_k8s_service_account_name": obj.get("org_k8s_service_account_name"),
            "otel_collector_config": obj.get("otel_collector_config"),
            "platform": obj.get("platform"),
            "runner_api_url": obj.get("runner_api_url"),
            "runner_group_id": obj.get("runner_group_id"),
            "sandbox_mode": obj.get("sandbox_mode"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


