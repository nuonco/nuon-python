# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from nuon.models.app_action_workflow_step_config import AppActionWorkflowStepConfig
from nuon.models.app_action_workflow_trigger_config import AppActionWorkflowTriggerConfig
from nuon.models.refs_ref import RefsRef
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppActionWorkflowConfig(BaseModel):
    """
    AppActionWorkflowConfig
    """ # noqa: E501
    action_workflow_id: Optional[StrictStr] = None
    app_config_id: Optional[StrictStr] = None
    app_id: Optional[StrictStr] = None
    component_dependency_ids: Optional[List[StrictStr]] = None
    created_at: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    references: Optional[List[StrictStr]] = None
    refs: Optional[List[RefsRef]] = None
    steps: Optional[List[AppActionWorkflowStepConfig]] = None
    timeout: Optional[StrictInt] = None
    triggers: Optional[List[AppActionWorkflowTriggerConfig]] = Field(default=None, description="INFO: if adding new associations here, ensure they are added to the batch delete activity")
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["action_workflow_id", "app_config_id", "app_id", "component_dependency_ids", "created_at", "created_by_id", "id", "references", "refs", "steps", "timeout", "triggers", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppActionWorkflowConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in refs (list)
        _items = []
        if self.refs:
            for _item in self.refs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['refs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item in self.steps:
                if _item:
                    _items.append(_item.to_dict())
            _dict['steps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in triggers (list)
        _items = []
        if self.triggers:
            for _item in self.triggers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['triggers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppActionWorkflowConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action_workflow_id": obj.get("action_workflow_id"),
            "app_config_id": obj.get("app_config_id"),
            "app_id": obj.get("app_id"),
            "component_dependency_ids": obj.get("component_dependency_ids"),
            "created_at": obj.get("created_at"),
            "created_by_id": obj.get("created_by_id"),
            "id": obj.get("id"),
            "references": obj.get("references"),
            "refs": [RefsRef.from_dict(_item) for _item in obj.get("refs")] if obj.get("refs") is not None else None,
            "steps": [AppActionWorkflowStepConfig.from_dict(_item) for _item in obj.get("steps")] if obj.get("steps") is not None else None,
            "timeout": obj.get("timeout"),
            "triggers": [AppActionWorkflowTriggerConfig.from_dict(_item) for _item in obj.get("triggers")] if obj.get("triggers") is not None else None,
            "updated_at": obj.get("updated_at")
        })
        return _obj


