# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from nuon.models.app_runner_job_execution import AppRunnerJobExecution
from nuon.models.app_runner_job_group import AppRunnerJobGroup
from nuon.models.app_runner_job_operation_type import AppRunnerJobOperationType
from nuon.models.app_runner_job_status import AppRunnerJobStatus
from nuon.models.app_runner_job_type import AppRunnerJobType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppRunnerJob(BaseModel):
    """
    AppRunnerJob
    """ # noqa: E501
    available_timeout: Optional[StrictInt] = Field(default=None, description="available timeout is how long a job can be marked as \"available\" before being requeued")
    created_at: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = None
    execution_count: Optional[StrictInt] = None
    execution_time: Optional[StrictInt] = None
    execution_timeout: Optional[StrictInt] = Field(default=None, description="execution timeout is how long a job can be marked as \"exeucuting\" before being requeued")
    executions: Optional[List[AppRunnerJobExecution]] = None
    final_runner_job_execution_id: Optional[StrictStr] = None
    finished_at: Optional[StrictStr] = None
    group: Optional[AppRunnerJobGroup] = None
    id: Optional[StrictStr] = None
    log_stream_id: Optional[StrictStr] = None
    max_executions: Optional[StrictInt] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    operation: Optional[AppRunnerJobOperationType] = None
    org_id: Optional[StrictStr] = None
    outputs: Optional[Dict[str, Any]] = None
    outputs_json: Optional[StrictStr] = None
    overall_timeout: Optional[StrictInt] = Field(default=None, description="overall timeout is how long a job can be attempted, before being cancelled")
    owner_id: Optional[StrictStr] = None
    owner_type: Optional[StrictStr] = None
    queue_timeout: Optional[StrictInt] = Field(default=None, description="queue timeout is how long a job can be queued, before being made available")
    runner_id: Optional[StrictStr] = None
    started_at: Optional[StrictStr] = None
    status: Optional[AppRunnerJobStatus] = None
    status_description: Optional[StrictStr] = None
    type: Optional[AppRunnerJobType] = None
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["available_timeout", "created_at", "created_by_id", "execution_count", "execution_time", "execution_timeout", "executions", "final_runner_job_execution_id", "finished_at", "group", "id", "log_stream_id", "max_executions", "metadata", "operation", "org_id", "outputs", "outputs_json", "overall_timeout", "owner_id", "owner_type", "queue_timeout", "runner_id", "started_at", "status", "status_description", "type", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppRunnerJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in executions (list)
        _items = []
        if self.executions:
            for _item in self.executions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['executions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppRunnerJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "available_timeout": obj.get("available_timeout"),
            "created_at": obj.get("created_at"),
            "created_by_id": obj.get("created_by_id"),
            "execution_count": obj.get("execution_count"),
            "execution_time": obj.get("execution_time"),
            "execution_timeout": obj.get("execution_timeout"),
            "executions": [AppRunnerJobExecution.from_dict(_item) for _item in obj.get("executions")] if obj.get("executions") is not None else None,
            "final_runner_job_execution_id": obj.get("final_runner_job_execution_id"),
            "finished_at": obj.get("finished_at"),
            "group": obj.get("group"),
            "id": obj.get("id"),
            "log_stream_id": obj.get("log_stream_id"),
            "max_executions": obj.get("max_executions"),
            "metadata": obj.get("metadata"),
            "operation": obj.get("operation"),
            "org_id": obj.get("org_id"),
            "outputs": obj.get("outputs"),
            "outputs_json": obj.get("outputs_json"),
            "overall_timeout": obj.get("overall_timeout"),
            "owner_id": obj.get("owner_id"),
            "owner_type": obj.get("owner_type"),
            "queue_timeout": obj.get("queue_timeout"),
            "runner_id": obj.get("runner_id"),
            "started_at": obj.get("started_at"),
            "status": obj.get("status"),
            "status_description": obj.get("status_description"),
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


