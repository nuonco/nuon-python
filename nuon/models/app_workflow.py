# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from nuon.models.app_account import AppAccount
from nuon.models.app_composite_status import AppCompositeStatus
from nuon.models.app_install_approval_option import AppInstallApprovalOption
from nuon.models.app_step_error_behavior import AppStepErrorBehavior
from nuon.models.app_workflow_step import AppWorkflowStep
from nuon.models.app_workflow_type import AppWorkflowType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppWorkflow(BaseModel):
    """
    AppWorkflow
    """ # noqa: E501
    approval_option: Optional[AppInstallApprovalOption] = None
    created_at: Optional[StrictStr] = None
    created_by: Optional[AppAccount] = None
    created_by_id: Optional[StrictStr] = None
    execution_time: Optional[StrictInt] = None
    finished: Optional[StrictBool] = None
    finished_at: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    install_action_workflow_runs: Optional[List[AppInstallActionWorkflowRun]] = None
    install_deploys: Optional[List[AppInstallDeploy]] = None
    install_sandbox_runs: Optional[List[AppInstallSandboxRun]] = None
    links: Optional[Dict[str, Any]] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    name: Optional[StrictStr] = None
    owner_id: Optional[StrictStr] = None
    owner_type: Optional[StrictStr] = None
    plan_only: Optional[StrictBool] = None
    started_at: Optional[StrictStr] = None
    status: Optional[AppCompositeStatus] = None
    step_error_behavior: Optional[AppStepErrorBehavior] = None
    steps: Optional[List[AppWorkflowStep]] = Field(default=None, description="steps represent each piece of the workflow")
    type: Optional[AppWorkflowType] = None
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["approval_option", "created_at", "created_by", "created_by_id", "execution_time", "finished", "finished_at", "id", "install_action_workflow_runs", "install_deploys", "install_sandbox_runs", "links", "metadata", "name", "owner_id", "owner_type", "plan_only", "started_at", "status", "step_error_behavior", "steps", "type", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppWorkflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in install_action_workflow_runs (list)
        _items = []
        if self.install_action_workflow_runs:
            for _item in self.install_action_workflow_runs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['install_action_workflow_runs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in install_deploys (list)
        _items = []
        if self.install_deploys:
            for _item in self.install_deploys:
                if _item:
                    _items.append(_item.to_dict())
            _dict['install_deploys'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in install_sandbox_runs (list)
        _items = []
        if self.install_sandbox_runs:
            for _item in self.install_sandbox_runs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['install_sandbox_runs'] = _items
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item in self.steps:
                if _item:
                    _items.append(_item.to_dict())
            _dict['steps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppWorkflow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approval_option": obj.get("approval_option"),
            "created_at": obj.get("created_at"),
            "created_by": AppAccount.from_dict(obj.get("created_by")) if obj.get("created_by") is not None else None,
            "created_by_id": obj.get("created_by_id"),
            "execution_time": obj.get("execution_time"),
            "finished": obj.get("finished"),
            "finished_at": obj.get("finished_at"),
            "id": obj.get("id"),
            "install_action_workflow_runs": [AppInstallActionWorkflowRun.from_dict(_item) for _item in obj.get("install_action_workflow_runs")] if obj.get("install_action_workflow_runs") is not None else None,
            "install_deploys": [AppInstallDeploy.from_dict(_item) for _item in obj.get("install_deploys")] if obj.get("install_deploys") is not None else None,
            "install_sandbox_runs": [AppInstallSandboxRun.from_dict(_item) for _item in obj.get("install_sandbox_runs")] if obj.get("install_sandbox_runs") is not None else None,
            "links": obj.get("links"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "owner_id": obj.get("owner_id"),
            "owner_type": obj.get("owner_type"),
            "plan_only": obj.get("plan_only"),
            "started_at": obj.get("started_at"),
            "status": AppCompositeStatus.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "step_error_behavior": obj.get("step_error_behavior"),
            "steps": [AppWorkflowStep.from_dict(_item) for _item in obj.get("steps")] if obj.get("steps") is not None else None,
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at")
        })
        return _obj

from nuon.models.app_install_action_workflow_run import AppInstallActionWorkflowRun
from nuon.models.app_install_deploy import AppInstallDeploy
from nuon.models.app_install_sandbox_run import AppInstallSandboxRun
# TODO: Rewrite to not use raise_errors
AppWorkflow.model_rebuild(raise_errors=False)

