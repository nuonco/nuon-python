# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from nuon.models.app_account import AppAccount
from nuon.models.app_action_workflow_config import AppActionWorkflowConfig
from nuon.models.app_action_workflow_trigger_type import AppActionWorkflowTriggerType
from nuon.models.app_composite_status import AppCompositeStatus
from nuon.models.app_install_action_workflow_run_step import AppInstallActionWorkflowRunStep
from nuon.models.app_log_stream import AppLogStream
from nuon.models.app_runner_job import AppRunnerJob
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppInstallActionWorkflowRun(BaseModel):
    """
    AppInstallActionWorkflowRun
    """ # noqa: E501
    action_workflow_config_id: Optional[StrictStr] = None
    config: Optional[AppActionWorkflowConfig] = None
    created_at: Optional[StrictStr] = None
    created_by: Optional[AppAccount] = None
    created_by_id: Optional[StrictStr] = None
    execution_time: Optional[StrictInt] = Field(default=None, description="after query")
    id: Optional[StrictStr] = None
    install_action_workflow: Optional[AppInstallActionWorkflow] = None
    install_action_workflow_id: Optional[StrictStr] = None
    install_id: Optional[StrictStr] = None
    install_workflow_id: Optional[StrictStr] = None
    log_stream: Optional[AppLogStream] = None
    outputs: Optional[Dict[str, Any]] = None
    run_env_vars: Optional[Dict[str, StrictStr]] = None
    runner_job: Optional[AppRunnerJob] = None
    status: Optional[StrictStr] = None
    status_description: Optional[StrictStr] = None
    status_v2: Optional[AppCompositeStatus] = None
    steps: Optional[List[AppInstallActionWorkflowRunStep]] = None
    trigger_type: Optional[AppActionWorkflowTriggerType] = None
    triggered_by_id: Optional[StrictStr] = None
    triggered_by_type: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    workflow: Optional[AppWorkflow] = None
    workflow_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["action_workflow_config_id", "config", "created_at", "created_by", "created_by_id", "execution_time", "id", "install_action_workflow", "install_action_workflow_id", "install_id", "install_workflow_id", "log_stream", "outputs", "run_env_vars", "runner_job", "status", "status_description", "status_v2", "steps", "trigger_type", "triggered_by_id", "triggered_by_type", "updated_at", "workflow", "workflow_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppInstallActionWorkflowRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of install_action_workflow
        if self.install_action_workflow:
            _dict['install_action_workflow'] = self.install_action_workflow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of log_stream
        if self.log_stream:
            _dict['log_stream'] = self.log_stream.to_dict()
        # override the default output from pydantic by calling `to_dict()` of runner_job
        if self.runner_job:
            _dict['runner_job'] = self.runner_job.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status_v2
        if self.status_v2:
            _dict['status_v2'] = self.status_v2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item in self.steps:
                if _item:
                    _items.append(_item.to_dict())
            _dict['steps'] = _items
        # override the default output from pydantic by calling `to_dict()` of workflow
        if self.workflow:
            _dict['workflow'] = self.workflow.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppInstallActionWorkflowRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action_workflow_config_id": obj.get("action_workflow_config_id"),
            "config": AppActionWorkflowConfig.from_dict(obj.get("config")) if obj.get("config") is not None else None,
            "created_at": obj.get("created_at"),
            "created_by": AppAccount.from_dict(obj.get("created_by")) if obj.get("created_by") is not None else None,
            "created_by_id": obj.get("created_by_id"),
            "execution_time": obj.get("execution_time"),
            "id": obj.get("id"),
            "install_action_workflow": AppInstallActionWorkflow.from_dict(obj.get("install_action_workflow")) if obj.get("install_action_workflow") is not None else None,
            "install_action_workflow_id": obj.get("install_action_workflow_id"),
            "install_id": obj.get("install_id"),
            "install_workflow_id": obj.get("install_workflow_id"),
            "log_stream": AppLogStream.from_dict(obj.get("log_stream")) if obj.get("log_stream") is not None else None,
            "outputs": obj.get("outputs"),
            "run_env_vars": obj.get("run_env_vars"),
            "runner_job": AppRunnerJob.from_dict(obj.get("runner_job")) if obj.get("runner_job") is not None else None,
            "status": obj.get("status"),
            "status_description": obj.get("status_description"),
            "status_v2": AppCompositeStatus.from_dict(obj.get("status_v2")) if obj.get("status_v2") is not None else None,
            "steps": [AppInstallActionWorkflowRunStep.from_dict(_item) for _item in obj.get("steps")] if obj.get("steps") is not None else None,
            "trigger_type": obj.get("trigger_type"),
            "triggered_by_id": obj.get("triggered_by_id"),
            "triggered_by_type": obj.get("triggered_by_type"),
            "updated_at": obj.get("updated_at"),
            "workflow": AppWorkflow.from_dict(obj.get("workflow")) if obj.get("workflow") is not None else None,
            "workflow_id": obj.get("workflow_id")
        })
        return _obj

from nuon.models.app_install_action_workflow import AppInstallActionWorkflow
from nuon.models.app_workflow import AppWorkflow
# TODO: Rewrite to not use raise_errors
AppInstallActionWorkflowRun.model_rebuild(raise_errors=False)

