# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class StateInstallStackState(BaseModel):
    """
    StateInstallStackState
    """ # noqa: E501
    checksum: Optional[StrictStr] = None
    outputs: Optional[Dict[str, StrictStr]] = None
    populated: Optional[StrictBool] = None
    quick_link_url: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    template_json: Optional[StrictStr] = None
    template_url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["checksum", "outputs", "populated", "quick_link_url", "status", "template_json", "template_url"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of StateInstallStackState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of StateInstallStackState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checksum": obj.get("checksum"),
            "outputs": obj.get("outputs"),
            "populated": obj.get("populated"),
            "quick_link_url": obj.get("quick_link_url"),
            "status": obj.get("status"),
            "template_json": obj.get("template_json"),
            "template_url": obj.get("template_url")
        })
        return _obj


