# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from nuon.models.app_runner_job import AppRunnerJob
from nuon.models.app_workflow_step_approval_response import AppWorkflowStepApprovalResponse
from nuon.models.app_workflow_step_approval_type import AppWorkflowStepApprovalType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppWorkflowStepApproval(BaseModel):
    """
    AppWorkflowStepApproval
    """ # noqa: E501
    created_at: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    install_workflow_step: Optional[AppWorkflowStep] = Field(default=None, alias="installWorkflowStep")
    install_workflow_step_id: Optional[StrictStr] = Field(default=None, description="the step that this approval belongs too", alias="installWorkflowStepID")
    owner_id: Optional[StrictStr] = None
    owner_type: Optional[StrictStr] = None
    response: Optional[AppWorkflowStepApprovalResponse] = Field(default=None, description="the response object must be created by the user in the UI or CLI")
    runner_job: Optional[AppRunnerJob] = Field(default=None, alias="runnerJob")
    runner_job_id: Optional[StrictStr] = Field(default=None, description="the runner job where this approval was created")
    type: Optional[AppWorkflowStepApprovalType] = None
    updated_at: Optional[StrictStr] = None
    workflow_step: Optional[AppWorkflowStep] = None
    workflow_step_id: Optional[StrictStr] = Field(default=None, description="afterquery")
    __properties: ClassVar[List[str]] = ["created_at", "created_by_id", "id", "installWorkflowStep", "installWorkflowStepID", "owner_id", "owner_type", "response", "runnerJob", "runner_job_id", "type", "updated_at", "workflow_step", "workflow_step_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppWorkflowStepApproval from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of install_workflow_step
        if self.install_workflow_step:
            _dict['installWorkflowStep'] = self.install_workflow_step.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of runner_job
        if self.runner_job:
            _dict['runnerJob'] = self.runner_job.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workflow_step
        if self.workflow_step:
            _dict['workflow_step'] = self.workflow_step.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppWorkflowStepApproval from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "created_by_id": obj.get("created_by_id"),
            "id": obj.get("id"),
            "installWorkflowStep": AppWorkflowStep.from_dict(obj.get("installWorkflowStep")) if obj.get("installWorkflowStep") is not None else None,
            "installWorkflowStepID": obj.get("installWorkflowStepID"),
            "owner_id": obj.get("owner_id"),
            "owner_type": obj.get("owner_type"),
            "response": AppWorkflowStepApprovalResponse.from_dict(obj.get("response")) if obj.get("response") is not None else None,
            "runnerJob": AppRunnerJob.from_dict(obj.get("runnerJob")) if obj.get("runnerJob") is not None else None,
            "runner_job_id": obj.get("runner_job_id"),
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at"),
            "workflow_step": AppWorkflowStep.from_dict(obj.get("workflow_step")) if obj.get("workflow_step") is not None else None,
            "workflow_step_id": obj.get("workflow_step_id")
        })
        return _obj

from nuon.models.app_workflow_step import AppWorkflowStep
# TODO: Rewrite to not use raise_errors
AppWorkflowStepApproval.model_rebuild(raise_errors=False)

