# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppAWSStackOutputs(BaseModel):
    """
    AppAWSStackOutputs
    """ # noqa: E501
    account_id: Optional[StrictStr] = None
    deprovision_iam_role_arn: Optional[StrictStr] = None
    maintenance_iam_role_arn: Optional[StrictStr] = None
    private_subnets: Optional[List[StrictStr]] = None
    provision_iam_role_arn: Optional[StrictStr] = None
    public_subnets: Optional[List[StrictStr]] = None
    region: Optional[StrictStr] = None
    runner_iam_role_arn: Optional[StrictStr] = None
    runner_subnet: Optional[StrictStr] = None
    vpc_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["account_id", "deprovision_iam_role_arn", "maintenance_iam_role_arn", "private_subnets", "provision_iam_role_arn", "public_subnets", "region", "runner_iam_role_arn", "runner_subnet", "vpc_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppAWSStackOutputs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppAWSStackOutputs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "deprovision_iam_role_arn": obj.get("deprovision_iam_role_arn"),
            "maintenance_iam_role_arn": obj.get("maintenance_iam_role_arn"),
            "private_subnets": obj.get("private_subnets"),
            "provision_iam_role_arn": obj.get("provision_iam_role_arn"),
            "public_subnets": obj.get("public_subnets"),
            "region": obj.get("region"),
            "runner_iam_role_arn": obj.get("runner_iam_role_arn"),
            "runner_subnet": obj.get("runner_subnet"),
            "vpc_id": obj.get("vpc_id")
        })
        return _obj


