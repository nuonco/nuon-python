# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppAppSecretConfig(BaseModel):
    """
    AppAppSecretConfig
    """ # noqa: E501
    app_config_id: Optional[StrictStr] = None
    app_id: Optional[StrictStr] = None
    app_secrets_config_id: Optional[StrictStr] = None
    auto_generate: Optional[StrictBool] = None
    cloudformation_param_name: Optional[StrictStr] = None
    cloudformation_stack_name: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = None
    default: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = None
    format: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    kubernetes_secret_name: Optional[StrictStr] = None
    kubernetes_secret_namespace: Optional[StrictStr] = None
    kubernetes_sync: Optional[StrictBool] = Field(default=None, description="for syncing into kubernetes")
    name: Optional[StrictStr] = None
    org_id: Optional[StrictStr] = None
    required: Optional[StrictBool] = None
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["app_config_id", "app_id", "app_secrets_config_id", "auto_generate", "cloudformation_param_name", "cloudformation_stack_name", "created_at", "created_by_id", "default", "description", "display_name", "format", "id", "kubernetes_secret_name", "kubernetes_secret_namespace", "kubernetes_sync", "name", "org_id", "required", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppAppSecretConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppAppSecretConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_config_id": obj.get("app_config_id"),
            "app_id": obj.get("app_id"),
            "app_secrets_config_id": obj.get("app_secrets_config_id"),
            "auto_generate": obj.get("auto_generate"),
            "cloudformation_param_name": obj.get("cloudformation_param_name"),
            "cloudformation_stack_name": obj.get("cloudformation_stack_name"),
            "created_at": obj.get("created_at"),
            "created_by_id": obj.get("created_by_id"),
            "default": obj.get("default"),
            "description": obj.get("description"),
            "display_name": obj.get("display_name"),
            "format": obj.get("format"),
            "id": obj.get("id"),
            "kubernetes_secret_name": obj.get("kubernetes_secret_name"),
            "kubernetes_secret_namespace": obj.get("kubernetes_secret_namespace"),
            "kubernetes_sync": obj.get("kubernetes_sync"),
            "name": obj.get("name"),
            "org_id": obj.get("org_id"),
            "required": obj.get("required"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


