# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from nuon.models.outputs_secret_sync_output import OutputsSecretSyncOutput
from nuon.models.state_actions_state import StateActionsState
from nuon.models.state_app_state import StateAppState
from nuon.models.state_cloud_account import StateCloudAccount
from nuon.models.state_domain_state import StateDomainState
from nuon.models.state_inputs_state import StateInputsState
from nuon.models.state_install_stack_state import StateInstallStackState
from nuon.models.state_install_state import StateInstallState
from nuon.models.state_org_state import StateOrgState
from nuon.models.state_runner_state import StateRunnerState
from nuon.models.state_sandbox_state import StateSandboxState
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GithubComPowertoolsdevMonoPkgTypesStateState(BaseModel):
    """
    GithubComPowertoolsdevMonoPkgTypesStateState
    """ # noqa: E501
    actions: Optional[StateActionsState] = None
    app: Optional[StateAppState] = None
    cloud_account: Optional[StateCloudAccount] = None
    components: Optional[Dict[str, Any]] = None
    domain: Optional[StateDomainState] = None
    id: Optional[StrictStr] = None
    inputs: Optional[StateInputsState] = None
    install: Optional[StateInstallState] = Field(default=None, description="NOTE: for backwards compatibility, these are remaining in place.")
    install_stack: Optional[StateInstallStackState] = None
    name: Optional[StrictStr] = None
    org: Optional[StateOrgState] = None
    runner: Optional[StateRunnerState] = None
    sandbox: Optional[StateSandboxState] = None
    secrets: Optional[Dict[str, OutputsSecretSyncOutput]] = None
    __properties: ClassVar[List[str]] = ["actions", "app", "cloud_account", "components", "domain", "id", "inputs", "install", "install_stack", "name", "org", "runner", "sandbox", "secrets"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GithubComPowertoolsdevMonoPkgTypesStateState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of actions
        if self.actions:
            _dict['actions'] = self.actions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app
        if self.app:
            _dict['app'] = self.app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_account
        if self.cloud_account:
            _dict['cloud_account'] = self.cloud_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of domain
        if self.domain:
            _dict['domain'] = self.domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inputs
        if self.inputs:
            _dict['inputs'] = self.inputs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of install
        if self.install:
            _dict['install'] = self.install.to_dict()
        # override the default output from pydantic by calling `to_dict()` of install_stack
        if self.install_stack:
            _dict['install_stack'] = self.install_stack.to_dict()
        # override the default output from pydantic by calling `to_dict()` of org
        if self.org:
            _dict['org'] = self.org.to_dict()
        # override the default output from pydantic by calling `to_dict()` of runner
        if self.runner:
            _dict['runner'] = self.runner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sandbox
        if self.sandbox:
            _dict['sandbox'] = self.sandbox.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in secrets (dict)
        _field_dict = {}
        if self.secrets:
            for _key in self.secrets:
                if self.secrets[_key]:
                    _field_dict[_key] = self.secrets[_key].to_dict()
            _dict['secrets'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GithubComPowertoolsdevMonoPkgTypesStateState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": StateActionsState.from_dict(obj.get("actions")) if obj.get("actions") is not None else None,
            "app": StateAppState.from_dict(obj.get("app")) if obj.get("app") is not None else None,
            "cloud_account": StateCloudAccount.from_dict(obj.get("cloud_account")) if obj.get("cloud_account") is not None else None,
            "components": obj.get("components"),
            "domain": StateDomainState.from_dict(obj.get("domain")) if obj.get("domain") is not None else None,
            "id": obj.get("id"),
            "inputs": StateInputsState.from_dict(obj.get("inputs")) if obj.get("inputs") is not None else None,
            "install": StateInstallState.from_dict(obj.get("install")) if obj.get("install") is not None else None,
            "install_stack": StateInstallStackState.from_dict(obj.get("install_stack")) if obj.get("install_stack") is not None else None,
            "name": obj.get("name"),
            "org": StateOrgState.from_dict(obj.get("org")) if obj.get("org") is not None else None,
            "runner": StateRunnerState.from_dict(obj.get("runner")) if obj.get("runner") is not None else None,
            "sandbox": StateSandboxState.from_dict(obj.get("sandbox")) if obj.get("sandbox") is not None else None,
            "secrets": dict(
                (_k, OutputsSecretSyncOutput.from_dict(_v))
                for _k, _v in obj.get("secrets").items()
            )
            if obj.get("secrets") is not None
            else None
        })
        return _obj


