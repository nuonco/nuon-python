# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from nuon.models.app_composite_status import AppCompositeStatus
from nuon.models.app_install_stack_version_run import AppInstallStackVersionRun
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppInstallStackVersion(BaseModel):
    """
    AppInstallStackVersion
    """ # noqa: E501
    app_config_id: Optional[StrictStr] = None
    aws_bucket_key: Optional[StrictStr] = None
    aws_bucket_name: Optional[StrictStr] = Field(default=None, description="aws configuration parameters")
    checksum: Optional[StrictStr] = None
    composite_status: Optional[AppCompositeStatus] = None
    contents: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    install_id: Optional[StrictStr] = None
    install_stack_id: Optional[StrictStr] = None
    org_id: Optional[StrictStr] = None
    phone_home_id: Optional[StrictStr] = None
    phone_home_url: Optional[StrictStr] = None
    quick_link_url: Optional[StrictStr] = None
    runs: Optional[List[AppInstallStackVersionRun]] = None
    template_url: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["app_config_id", "aws_bucket_key", "aws_bucket_name", "checksum", "composite_status", "contents", "created_at", "created_by_id", "id", "install_id", "install_stack_id", "org_id", "phone_home_id", "phone_home_url", "quick_link_url", "runs", "template_url", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppInstallStackVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of composite_status
        if self.composite_status:
            _dict['composite_status'] = self.composite_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in runs (list)
        _items = []
        if self.runs:
            for _item in self.runs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['runs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppInstallStackVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_config_id": obj.get("app_config_id"),
            "aws_bucket_key": obj.get("aws_bucket_key"),
            "aws_bucket_name": obj.get("aws_bucket_name"),
            "checksum": obj.get("checksum"),
            "composite_status": AppCompositeStatus.from_dict(obj.get("composite_status")) if obj.get("composite_status") is not None else None,
            "contents": obj.get("contents"),
            "created_at": obj.get("created_at"),
            "created_by_id": obj.get("created_by_id"),
            "id": obj.get("id"),
            "install_id": obj.get("install_id"),
            "install_stack_id": obj.get("install_stack_id"),
            "org_id": obj.get("org_id"),
            "phone_home_id": obj.get("phone_home_id"),
            "phone_home_url": obj.get("phone_home_url"),
            "quick_link_url": obj.get("quick_link_url"),
            "runs": [AppInstallStackVersionRun.from_dict(_item) for _item in obj.get("runs")] if obj.get("runs") is not None else None,
            "template_url": obj.get("template_url"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


