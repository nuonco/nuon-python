# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from nuon.models.app_account import AppAccount
from nuon.models.app_composite_status import AppCompositeStatus
from nuon.models.app_install_deploy_type import AppInstallDeployType
from nuon.models.app_log_stream import AppLogStream
from nuon.models.app_oci_artifact import AppOCIArtifact
from nuon.models.app_runner_job import AppRunnerJob
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppInstallDeploy(BaseModel):
    """
    AppInstallDeploy
    """ # noqa: E501
    action_workflow_runs: Optional[List[AppInstallActionWorkflowRun]] = None
    build_id: Optional[StrictStr] = None
    component_build: Optional[AppComponentBuild] = None
    component_config_version: Optional[StrictInt] = None
    component_id: Optional[StrictStr] = None
    component_name: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    created_by: Optional[AppAccount] = None
    created_by_id: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    install_component_id: Optional[StrictStr] = None
    install_deploy_type: Optional[AppInstallDeployType] = None
    install_id: Optional[StrictStr] = Field(default=None, description="Fields that are de-nested at read time using AfterQuery")
    install_workflow_id: Optional[StrictStr] = Field(default=None, description="DEPRECATED: use WorkflowID")
    log_stream: Optional[AppLogStream] = None
    oci_artifact: Optional[AppOCIArtifact] = None
    outputs: Optional[Dict[str, Any]] = None
    release_id: Optional[StrictStr] = None
    runner_jobs: Optional[List[AppRunnerJob]] = Field(default=None, description="runner details")
    status: Optional[StrictStr] = None
    status_description: Optional[StrictStr] = None
    status_v2: Optional[AppCompositeStatus] = None
    updated_at: Optional[StrictStr] = None
    workflow: Optional[AppWorkflow] = None
    workflow_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["action_workflow_runs", "build_id", "component_build", "component_config_version", "component_id", "component_name", "created_at", "created_by", "created_by_id", "id", "install_component_id", "install_deploy_type", "install_id", "install_workflow_id", "log_stream", "oci_artifact", "outputs", "release_id", "runner_jobs", "status", "status_description", "status_v2", "updated_at", "workflow", "workflow_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppInstallDeploy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in action_workflow_runs (list)
        _items = []
        if self.action_workflow_runs:
            for _item in self.action_workflow_runs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['action_workflow_runs'] = _items
        # override the default output from pydantic by calling `to_dict()` of component_build
        if self.component_build:
            _dict['component_build'] = self.component_build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of log_stream
        if self.log_stream:
            _dict['log_stream'] = self.log_stream.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oci_artifact
        if self.oci_artifact:
            _dict['oci_artifact'] = self.oci_artifact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in runner_jobs (list)
        _items = []
        if self.runner_jobs:
            for _item in self.runner_jobs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['runner_jobs'] = _items
        # override the default output from pydantic by calling `to_dict()` of status_v2
        if self.status_v2:
            _dict['status_v2'] = self.status_v2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workflow
        if self.workflow:
            _dict['workflow'] = self.workflow.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppInstallDeploy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action_workflow_runs": [AppInstallActionWorkflowRun.from_dict(_item) for _item in obj.get("action_workflow_runs")] if obj.get("action_workflow_runs") is not None else None,
            "build_id": obj.get("build_id"),
            "component_build": AppComponentBuild.from_dict(obj.get("component_build")) if obj.get("component_build") is not None else None,
            "component_config_version": obj.get("component_config_version"),
            "component_id": obj.get("component_id"),
            "component_name": obj.get("component_name"),
            "created_at": obj.get("created_at"),
            "created_by": AppAccount.from_dict(obj.get("created_by")) if obj.get("created_by") is not None else None,
            "created_by_id": obj.get("created_by_id"),
            "id": obj.get("id"),
            "install_component_id": obj.get("install_component_id"),
            "install_deploy_type": obj.get("install_deploy_type"),
            "install_id": obj.get("install_id"),
            "install_workflow_id": obj.get("install_workflow_id"),
            "log_stream": AppLogStream.from_dict(obj.get("log_stream")) if obj.get("log_stream") is not None else None,
            "oci_artifact": AppOCIArtifact.from_dict(obj.get("oci_artifact")) if obj.get("oci_artifact") is not None else None,
            "outputs": obj.get("outputs"),
            "release_id": obj.get("release_id"),
            "runner_jobs": [AppRunnerJob.from_dict(_item) for _item in obj.get("runner_jobs")] if obj.get("runner_jobs") is not None else None,
            "status": obj.get("status"),
            "status_description": obj.get("status_description"),
            "status_v2": AppCompositeStatus.from_dict(obj.get("status_v2")) if obj.get("status_v2") is not None else None,
            "updated_at": obj.get("updated_at"),
            "workflow": AppWorkflow.from_dict(obj.get("workflow")) if obj.get("workflow") is not None else None,
            "workflow_id": obj.get("workflow_id")
        })
        return _obj

from nuon.models.app_component_build import AppComponentBuild
from nuon.models.app_install_action_workflow_run import AppInstallActionWorkflowRun
from nuon.models.app_workflow import AppWorkflow
# TODO: Rewrite to not use raise_errors
AppInstallDeploy.model_rebuild(raise_errors=False)

