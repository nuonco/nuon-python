# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from nuon.models.app_action_workflow_config import AppActionWorkflowConfig
from nuon.models.app_app_branch import AppAppBranch
from nuon.models.app_app_break_glass_config import AppAppBreakGlassConfig
from nuon.models.app_app_config_status import AppAppConfigStatus
from nuon.models.app_app_input_config import AppAppInputConfig
from nuon.models.app_app_permissions_config import AppAppPermissionsConfig
from nuon.models.app_app_policies_config import AppAppPoliciesConfig
from nuon.models.app_app_runner_config import AppAppRunnerConfig
from nuon.models.app_app_sandbox_config import AppAppSandboxConfig
from nuon.models.app_app_secrets_config import AppAppSecretsConfig
from nuon.models.app_app_stack_config import AppAppStackConfig
from nuon.models.app_component_config_connection import AppComponentConfigConnection
from nuon.models.app_vcs_connection_commit import AppVCSConnectionCommit
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppAppConfig(BaseModel):
    """
    AppAppConfig
    """ # noqa: E501
    action_workflow_configs: Optional[List[AppActionWorkflowConfig]] = None
    app_branch: Optional[AppAppBranch] = None
    app_branch_id: Optional[StrictStr] = None
    app_id: Optional[StrictStr] = None
    break_glass: Optional[AppAppBreakGlassConfig] = None
    checksum: Optional[StrictStr] = None
    cli_version: Optional[StrictStr] = None
    component_config_connections: Optional[List[AppComponentConfigConnection]] = None
    component_ids: Optional[List[StrictStr]] = None
    created_at: Optional[StrictStr] = None
    created_by_id: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    input: Optional[AppAppInputConfig] = None
    org_id: Optional[StrictStr] = None
    permissions: Optional[AppAppPermissionsConfig] = None
    policies: Optional[AppAppPoliciesConfig] = None
    readme: Optional[StrictStr] = None
    runner: Optional[AppAppRunnerConfig] = None
    sandbox: Optional[AppAppSandboxConfig] = None
    secrets: Optional[AppAppSecretsConfig] = None
    stack: Optional[AppAppStackConfig] = None
    state: Optional[StrictStr] = None
    status: Optional[AppAppConfigStatus] = None
    status_description: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    vcs_connection_commit: Optional[AppVCSConnectionCommit] = None
    version: Optional[StrictInt] = Field(default=None, description="fields that are filled in via after query or views")
    __properties: ClassVar[List[str]] = ["action_workflow_configs", "app_branch", "app_branch_id", "app_id", "break_glass", "checksum", "cli_version", "component_config_connections", "component_ids", "created_at", "created_by_id", "id", "input", "org_id", "permissions", "policies", "readme", "runner", "sandbox", "secrets", "stack", "state", "status", "status_description", "updated_at", "vcs_connection_commit", "version"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppAppConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in action_workflow_configs (list)
        _items = []
        if self.action_workflow_configs:
            for _item in self.action_workflow_configs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['action_workflow_configs'] = _items
        # override the default output from pydantic by calling `to_dict()` of app_branch
        if self.app_branch:
            _dict['app_branch'] = self.app_branch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of break_glass
        if self.break_glass:
            _dict['break_glass'] = self.break_glass.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in component_config_connections (list)
        _items = []
        if self.component_config_connections:
            for _item in self.component_config_connections:
                if _item:
                    _items.append(_item.to_dict())
            _dict['component_config_connections'] = _items
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policies
        if self.policies:
            _dict['policies'] = self.policies.to_dict()
        # override the default output from pydantic by calling `to_dict()` of runner
        if self.runner:
            _dict['runner'] = self.runner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sandbox
        if self.sandbox:
            _dict['sandbox'] = self.sandbox.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secrets
        if self.secrets:
            _dict['secrets'] = self.secrets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stack
        if self.stack:
            _dict['stack'] = self.stack.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vcs_connection_commit
        if self.vcs_connection_commit:
            _dict['vcs_connection_commit'] = self.vcs_connection_commit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppAppConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action_workflow_configs": [AppActionWorkflowConfig.from_dict(_item) for _item in obj.get("action_workflow_configs")] if obj.get("action_workflow_configs") is not None else None,
            "app_branch": AppAppBranch.from_dict(obj.get("app_branch")) if obj.get("app_branch") is not None else None,
            "app_branch_id": obj.get("app_branch_id"),
            "app_id": obj.get("app_id"),
            "break_glass": AppAppBreakGlassConfig.from_dict(obj.get("break_glass")) if obj.get("break_glass") is not None else None,
            "checksum": obj.get("checksum"),
            "cli_version": obj.get("cli_version"),
            "component_config_connections": [AppComponentConfigConnection.from_dict(_item) for _item in obj.get("component_config_connections")] if obj.get("component_config_connections") is not None else None,
            "component_ids": obj.get("component_ids"),
            "created_at": obj.get("created_at"),
            "created_by_id": obj.get("created_by_id"),
            "id": obj.get("id"),
            "input": AppAppInputConfig.from_dict(obj.get("input")) if obj.get("input") is not None else None,
            "org_id": obj.get("org_id"),
            "permissions": AppAppPermissionsConfig.from_dict(obj.get("permissions")) if obj.get("permissions") is not None else None,
            "policies": AppAppPoliciesConfig.from_dict(obj.get("policies")) if obj.get("policies") is not None else None,
            "readme": obj.get("readme"),
            "runner": AppAppRunnerConfig.from_dict(obj.get("runner")) if obj.get("runner") is not None else None,
            "sandbox": AppAppSandboxConfig.from_dict(obj.get("sandbox")) if obj.get("sandbox") is not None else None,
            "secrets": AppAppSecretsConfig.from_dict(obj.get("secrets")) if obj.get("secrets") is not None else None,
            "stack": AppAppStackConfig.from_dict(obj.get("stack")) if obj.get("stack") is not None else None,
            "state": obj.get("state"),
            "status": obj.get("status"),
            "status_description": obj.get("status_description"),
            "updated_at": obj.get("updated_at"),
            "vcs_connection_commit": AppVCSConnectionCommit.from_dict(obj.get("vcs_connection_commit")) if obj.get("vcs_connection_commit") is not None else None,
            "version": obj.get("version")
        })
        return _obj


