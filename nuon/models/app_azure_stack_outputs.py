# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppAzureStackOutputs(BaseModel):
    """
    AppAzureStackOutputs
    """ # noqa: E501
    key_vault_id: Optional[StrictStr] = None
    key_vault_name: Optional[StrictStr] = None
    network_id: Optional[StrictStr] = None
    network_name: Optional[StrictStr] = None
    private_subnet_ids: Optional[List[StrictStr]] = None
    private_subnet_names: Optional[List[StrictStr]] = None
    public_subnet_ids: Optional[List[StrictStr]] = None
    public_subnet_names: Optional[List[StrictStr]] = None
    resource_group_id: Optional[StrictStr] = None
    resource_group_location: Optional[StrictStr] = None
    resource_group_name: Optional[StrictStr] = None
    subscription_id: Optional[StrictStr] = None
    subscription_tenant_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["key_vault_id", "key_vault_name", "network_id", "network_name", "private_subnet_ids", "private_subnet_names", "public_subnet_ids", "public_subnet_names", "resource_group_id", "resource_group_location", "resource_group_name", "subscription_id", "subscription_tenant_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppAzureStackOutputs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppAzureStackOutputs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key_vault_id": obj.get("key_vault_id"),
            "key_vault_name": obj.get("key_vault_name"),
            "network_id": obj.get("network_id"),
            "network_name": obj.get("network_name"),
            "private_subnet_ids": obj.get("private_subnet_ids"),
            "private_subnet_names": obj.get("private_subnet_names"),
            "public_subnet_ids": obj.get("public_subnet_ids"),
            "public_subnet_names": obj.get("public_subnet_names"),
            "resource_group_id": obj.get("resource_group_id"),
            "resource_group_location": obj.get("resource_group_location"),
            "resource_group_name": obj.get("resource_group_name"),
            "subscription_id": obj.get("subscription_id"),
            "subscription_tenant_id": obj.get("subscription_tenant_id")
        })
        return _obj


