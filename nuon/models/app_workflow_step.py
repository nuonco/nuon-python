# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from nuon.models.app_account import AppAccount
from nuon.models.app_composite_status import AppCompositeStatus
from nuon.models.app_workflow_step_execution_type import AppWorkflowStepExecutionType
from nuon.models.app_workflow_step_policy_validation import AppWorkflowStepPolicyValidation
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppWorkflowStep(BaseModel):
    """
    AppWorkflowStep
    """ # noqa: E501
    approval: Optional[AppWorkflowStepApproval] = Field(default=None, description="the step approval is built into each step at the runner level.")
    created_at: Optional[StrictStr] = None
    created_by: Optional[AppAccount] = None
    created_by_id: Optional[StrictStr] = None
    execution_time: Optional[StrictInt] = None
    execution_type: Optional[AppWorkflowStepExecutionType] = None
    finished: Optional[StrictBool] = None
    finished_at: Optional[StrictStr] = None
    group_idx: Optional[StrictInt] = Field(default=None, description="to group steps which belong to same logical group, eg, plan/apply")
    group_retry_idx: Optional[StrictInt] = Field(default=None, description="counter for every retry attempted on a group")
    id: Optional[StrictStr] = None
    idx: Optional[StrictInt] = None
    install_workflow_id: Optional[StrictStr] = Field(default=None, description="DEPRECATED: this is the install workflow ID, which is now the workflow ID.")
    links: Optional[Dict[str, Any]] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    name: Optional[StrictStr] = None
    owner_id: Optional[StrictStr] = None
    owner_type: Optional[StrictStr] = None
    policy_validation: Optional[AppWorkflowStepPolicyValidation] = None
    retried: Optional[StrictBool] = None
    retryable: Optional[StrictBool] = None
    skippable: Optional[StrictBool] = None
    started_at: Optional[StrictStr] = None
    status: Optional[AppCompositeStatus] = Field(default=None, description="status")
    step_target_id: Optional[StrictStr] = Field(default=None, description="the following fields are set _once_ a step is in flight, and are orchestrated via the step's signal.  this is a polymorphic gorm relationship to one of the following objects:  install_cloudformation_stack install_sandbox_run install_runner_update install_deploy install_action_workflow_run (can be many of these)")
    step_target_type: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    workflow_id: Optional[StrictStr] = Field(default=None, description="Fields that are de-nested at read time using AfterQuery")
    __properties: ClassVar[List[str]] = ["approval", "created_at", "created_by", "created_by_id", "execution_time", "execution_type", "finished", "finished_at", "group_idx", "group_retry_idx", "id", "idx", "install_workflow_id", "links", "metadata", "name", "owner_id", "owner_type", "policy_validation", "retried", "retryable", "skippable", "started_at", "status", "step_target_id", "step_target_type", "updated_at", "workflow_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppWorkflowStep from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of approval
        if self.approval:
            _dict['approval'] = self.approval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy_validation
        if self.policy_validation:
            _dict['policy_validation'] = self.policy_validation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppWorkflowStep from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approval": AppWorkflowStepApproval.from_dict(obj.get("approval")) if obj.get("approval") is not None else None,
            "created_at": obj.get("created_at"),
            "created_by": AppAccount.from_dict(obj.get("created_by")) if obj.get("created_by") is not None else None,
            "created_by_id": obj.get("created_by_id"),
            "execution_time": obj.get("execution_time"),
            "execution_type": obj.get("execution_type"),
            "finished": obj.get("finished"),
            "finished_at": obj.get("finished_at"),
            "group_idx": obj.get("group_idx"),
            "group_retry_idx": obj.get("group_retry_idx"),
            "id": obj.get("id"),
            "idx": obj.get("idx"),
            "install_workflow_id": obj.get("install_workflow_id"),
            "links": obj.get("links"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "owner_id": obj.get("owner_id"),
            "owner_type": obj.get("owner_type"),
            "policy_validation": AppWorkflowStepPolicyValidation.from_dict(obj.get("policy_validation")) if obj.get("policy_validation") is not None else None,
            "retried": obj.get("retried"),
            "retryable": obj.get("retryable"),
            "skippable": obj.get("skippable"),
            "started_at": obj.get("started_at"),
            "status": AppCompositeStatus.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "step_target_id": obj.get("step_target_id"),
            "step_target_type": obj.get("step_target_type"),
            "updated_at": obj.get("updated_at"),
            "workflow_id": obj.get("workflow_id")
        })
        return _obj

from nuon.models.app_workflow_step_approval import AppWorkflowStepApproval
# TODO: Rewrite to not use raise_errors
AppWorkflowStep.model_rebuild(raise_errors=False)

