# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OutputsSecretSyncOutput(BaseModel):
    """
    OutputsSecretSyncOutput
    """ # noqa: E501
    arn: Optional[StrictStr] = None
    exists: Optional[StrictBool] = None
    kubernetes_key: Optional[StrictStr] = None
    kubernetes_name: Optional[StrictStr] = None
    kubernetes_namespace: Optional[StrictStr] = None
    length: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    timestamp: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["arn", "exists", "kubernetes_key", "kubernetes_name", "kubernetes_namespace", "length", "name", "timestamp"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OutputsSecretSyncOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OutputsSecretSyncOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arn": obj.get("arn"),
            "exists": obj.get("exists"),
            "kubernetes_key": obj.get("kubernetes_key"),
            "kubernetes_name": obj.get("kubernetes_name"),
            "kubernetes_namespace": obj.get("kubernetes_namespace"),
            "length": obj.get("length"),
            "name": obj.get("name"),
            "timestamp": obj.get("timestamp")
        })
        return _obj


