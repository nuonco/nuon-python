# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nuon.models.app_install_component_summary import AppInstallComponentSummary

class TestAppInstallComponentSummary(unittest.TestCase):
    """AppInstallComponentSummary unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppInstallComponentSummary:
        """Test AppInstallComponentSummary
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppInstallComponentSummary`
        """
        model = AppInstallComponentSummary()
        if include_optional:
            return AppInstallComponentSummary(
                build_status = 'planning',
                build_status_description = '',
                component_config = nuon.models.app/component_config_connection.app.ComponentConfigConnection(
                    app_config_id = '', 
                    app_config_version = 56, 
                    checksum = '', 
                    component_dependency_ids = [
                        ''
                        ], 
                    component_id = '', 
                    component_name = '', 
                    created_at = '', 
                    created_by_id = '', 
                    docker_build = nuon.models.app/docker_build_component_config.app.DockerBuildComponentConfig(
                        build_args = [
                            ''
                            ], 
                        component_config_connection_id = '', 
                        connected_github_vcs_config = nuon.models.app/connected_github_vcs_config.app.ConnectedGithubVCSConfig(
                            branch = '', 
                            component_config_id = '', 
                            component_config_type = '', 
                            created_at = '', 
                            created_by_id = '', 
                            directory = '', 
                            id = '', 
                            repo = '', 
                            repo_name = '', 
                            repo_owner = '', 
                            updated_at = '', 
                            vcs_connection = nuon.models.app/vcs_connection.app.VCSConnection(
                                created_at = '', 
                                created_by_id = '', 
                                github_install_id = '', 
                                id = '', 
                                updated_at = '', 
                                vcs_connection_commit = [
                                    nuon.models.app/vcs_connection_commit.app.VCSConnectionCommit(
                                        author_email = '', 
                                        author_name = '', 
                                        created_at = '', 
                                        created_by_id = '', 
                                        id = '', 
                                        message = '', 
                                        sha = '', 
                                        updated_at = '', 
                                        vcs_connection_id = '', )
                                    ], ), 
                            vcs_connection_id = '', ), 
                        created_at = '', 
                        created_by_id = '', 
                        dockerfile = '', 
                        env_vars = {
                            'key' : ''
                            }, 
                        id = '', 
                        public_git_vcs_config = nuon.models.app/public_git_vcs_config.app.PublicGitVCSConfig(
                            branch = '', 
                            component_config_id = '', 
                            component_config_type = '', 
                            created_at = '', 
                            created_by_id = '', 
                            directory = '', 
                            id = '', 
                            repo = '', 
                            updated_at = '', ), 
                        target = '', 
                        updated_at = '', ), 
                    external_image = nuon.models.app/external_image_component_config.app.ExternalImageComponentConfig(
                        aws_ecr_image_config = nuon.models.app/awsecr_image_config.app.AWSECRImageConfig(
                            aws_region = '', 
                            component_config_id = '', 
                            component_config_type = '', 
                            created_at = '', 
                            created_by_id = '', 
                            iam_role_arn = '', 
                            id = '', 
                            updated_at = '', ), 
                        component_config_connection_id = '', 
                        created_at = '', 
                        created_by_id = '', 
                        id = '', 
                        image_url = '', 
                        tag = '', 
                        updated_at = '', ), 
                    helm = nuon.models.app/helm_component_config.app.HelmComponentConfig(
                        chart_name = '', 
                        component_config_connection_id = '', 
                        created_at = '', 
                        created_by_id = '', 
                        helm_config_json = nuon.models.app/helm_config.app.HelmConfig(
                            chart_name = '', 
                            namespace = '', 
                            storage_driver = '', 
                            take_ownership = True, 
                            values = {
                                'key' : ''
                                }, 
                            values_files = [
                                ''
                                ], ), 
                        id = '', 
                        namespace = '', 
                        storage_driver = '', 
                        take_ownership = True, 
                        updated_at = '', 
                        values = {
                            'key' : ''
                            }, 
                        values_files = [
                            ''
                            ], ), 
                    id = '', 
                    job = nuon.models.app/job_component_config.app.JobComponentConfig(
                        args = [
                            ''
                            ], 
                        cmd = [
                            ''
                            ], 
                        component_config_connection_id = '', 
                        created_at = '', 
                        created_by_id = '', 
                        id = '', 
                        image_url = '', 
                        tag = '', 
                        updated_at = '', ), 
                    kubernetes_manifest = nuon.models.app/kubernetes_manifest_component_config.app.KubernetesManifestComponentConfig(
                        component_config_connection_id = '', 
                        created_at = '', 
                        created_by_id = '', 
                        id = '', 
                        manifest = '', 
                        namespace = '', 
                        updated_at = '', ), 
                    references = [
                        ''
                        ], 
                    refs = [
                        nuon.models.refs/ref.refs.Ref(
                            input = '', 
                            name = '', 
                            type = 'sandbox', 
                            value = '', )
                        ], 
                    terraform_module = nuon.models.app/terraform_module_component_config.app.TerraformModuleComponentConfig(
                        component_config_connection_id = '', 
                        created_at = '', 
                        created_by_id = '', 
                        id = '', 
                        updated_at = '', 
                        variables = {
                            'key' : ''
                            }, 
                        variables_files = [
                            ''
                            ], 
                        version = '', ), 
                    type = 'terraform_module', 
                    updated_at = '', 
                    version = 56, ),
                component_id = '',
                component_name = '',
                dependencies = [
                    nuon.models.app/component.app.Component(
                        app_id = '', 
                        config_versions = 56, 
                        created_at = '', 
                        created_by_id = '', 
                        dependencies = [
                            ''
                            ], 
                        id = '', 
                        links = {
                            'key' : null
                            }, 
                        name = '', 
                        resolved_var_name = '', 
                        status = '', 
                        status_description = '', 
                        type = 'terraform_module', 
                        updated_at = '', 
                        var_name = '', )
                    ],
                deploy_status = 'active',
                deploy_status_description = '',
                id = ''
            )
        else:
            return AppInstallComponentSummary(
        )
        """

    def testAppInstallComponentSummary(self):
        """Test AppInstallComponentSummary"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
