# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nuon.models.app_workflow_step import AppWorkflowStep

class TestAppWorkflowStep(unittest.TestCase):
    """AppWorkflowStep unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppWorkflowStep:
        """Test AppWorkflowStep
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppWorkflowStep`
        """
        model = AppWorkflowStep()
        if include_optional:
            return AppWorkflowStep(
                approval = nuon.models.app/workflow_step_approval.app.WorkflowStepApproval(
                    created_at = '', 
                    created_by_id = '', 
                    id = '', 
                    install_workflow_step = nuon.models.app/workflow_step.app.WorkflowStep(
                        approval = null, 
                        created_at = '', 
                        created_by = nuon.models.app/account.app.Account(
                            account_type = 'auth0', 
                            created_at = '', 
                            email = '', 
                            id = '', 
                            org_ids = [
                                ''
                                ], 
                            permissions = {
                                'key' : 'unknown'
                                }, 
                            roles = [
                                nuon.models.app/role.app.Role(
                                    created_by = nuon.models.app/account.app.Account(
                                        created_at = '', 
                                        email = '', 
                                        id = '', 
                                        subject = '', 
                                        updated_at = '', ), 
                                    created_at = '', 
                                    created_by_id = '', 
                                    id = '', 
                                    policies = [
                                        nuon.models.app/policy.app.Policy(
                                            created_at = '', 
                                            created_by_id = '', 
                                            id = '', 
                                            name = 'org_admin', 
                                            role_id = '', 
                                            updated_at = '', )
                                        ], 
                                    role_type = 'org_admin', 
                                    updated_at = '', )
                                ], 
                            subject = '', 
                            updated_at = '', ), 
                        created_by_id = '', 
                        execution_time = 56, 
                        execution_type = 'system', 
                        finished = True, 
                        finished_at = '', 
                        group_idx = 56, 
                        group_retry_idx = 56, 
                        id = '', 
                        idx = 56, 
                        install_workflow_id = '', 
                        links = {
                            'key' : null
                            }, 
                        metadata = {
                            'key' : ''
                            }, 
                        name = '', 
                        owner_id = '', 
                        owner_type = '', 
                        policy_validation = nuon.models.app/workflow_step_policy_validation.app.WorkflowStepPolicyValidation(
                            created_at = '', 
                            created_by_id = '', 
                            id = '', 
                            install_workflow_step_id = '', 
                            response = '', 
                            runner_job_id = '', 
                            status = null, 
                            updated_at = '', ), 
                        retried = True, 
                        retryable = True, 
                        skippable = True, 
                        started_at = '', 
                        status = null, 
                        step_target_id = '', 
                        step_target_type = '', 
                        updated_at = '', 
                        workflow_id = '', ), 
                    install_workflow_step_id = '', 
                    owner_id = '', 
                    owner_type = '', 
                    response = null, 
                    runner_job = nuon.models.app/runner_job.app.RunnerJob(
                        available_timeout = 56, 
                        created_at = '', 
                        created_by_id = '', 
                        execution_count = 56, 
                        execution_time = 56, 
                        execution_timeout = 56, 
                        executions = [
                            nuon.models.app/runner_job_execution.app.RunnerJobExecution(
                                created_at = '', 
                                created_by_id = '', 
                                id = '', 
                                org_id = '', 
                                outputs = nuon.models.app/runner_job_execution_outputs.app.RunnerJobExecutionOutputs(
                                    created_at = '', 
                                    created_by_id = '', 
                                    id = '', 
                                    org_id = '', 
                                    outputs_json = '', 
                                    runner_job_execution_id = '', 
                                    updated_at = '', ), 
                                result = nuon.models.app/runner_job_execution_result.app.RunnerJobExecutionResult(
                                    contents = '', 
                                    contents_display = '', 
                                    contents_display_gzip = '', 
                                    contents_gzip = '', 
                                    created_at = '', 
                                    created_by_id = '', 
                                    error_code = 56, 
                                    error_metadata = {
                                        'key' : ''
                                        }, 
                                    id = '', 
                                    org_id = '', 
                                    runner_job_execution_id = '', 
                                    success = True, 
                                    updated_at = '', ), 
                                runner_job_id = '', 
                                status = 'pending', 
                                updated_at = '', )
                            ], 
                        final_runner_job_execution_id = '', 
                        finished_at = '', 
                        group = 'health-checks', 
                        id = '', 
                        log_stream_id = '', 
                        max_executions = 56, 
                        operation = 'exec', 
                        org_id = '', 
                        outputs = { }, 
                        outputs_json = '', 
                        overall_timeout = 56, 
                        owner_id = '', 
                        owner_type = '', 
                        queue_timeout = 56, 
                        runner_id = '', 
                        started_at = '', 
                        status = 'queued', 
                        status_description = '', 
                        type = 'health-check', 
                        updated_at = '', ), 
                    runner_job_id = '', 
                    type = 'noop', 
                    updated_at = '', 
                    workflow_step = nuon.models.app/workflow_step.app.WorkflowStep(
                        approval = null, 
                        created_at = '', 
                        created_by_id = '', 
                        execution_time = 56, 
                        finished = True, 
                        finished_at = '', 
                        group_idx = 56, 
                        group_retry_idx = 56, 
                        id = '', 
                        idx = 56, 
                        install_workflow_id = '', 
                        owner_id = '', 
                        owner_type = '', 
                        retried = True, 
                        retryable = True, 
                        skippable = True, 
                        started_at = '', 
                        step_target_id = '', 
                        step_target_type = '', 
                        updated_at = '', 
                        workflow_id = '', ), 
                    workflow_step_id = '', ),
                created_at = '',
                created_by = nuon.models.app/account.app.Account(
                    account_type = 'auth0', 
                    created_at = '', 
                    email = '', 
                    id = '', 
                    org_ids = [
                        ''
                        ], 
                    permissions = {
                        'key' : 'unknown'
                        }, 
                    roles = [
                        nuon.models.app/role.app.Role(
                            created_by = nuon.models.app/account.app.Account(
                                created_at = '', 
                                email = '', 
                                id = '', 
                                subject = '', 
                                updated_at = '', ), 
                            created_at = '', 
                            created_by_id = '', 
                            id = '', 
                            policies = [
                                nuon.models.app/policy.app.Policy(
                                    created_at = '', 
                                    created_by_id = '', 
                                    id = '', 
                                    name = 'org_admin', 
                                    role_id = '', 
                                    updated_at = '', )
                                ], 
                            role_type = 'org_admin', 
                            updated_at = '', )
                        ], 
                    subject = '', 
                    updated_at = '', ),
                created_by_id = '',
                execution_time = 56,
                execution_type = 'system',
                finished = True,
                finished_at = '',
                group_idx = 56,
                group_retry_idx = 56,
                id = '',
                idx = 56,
                install_workflow_id = '',
                links = {
                    'key' : null
                    },
                metadata = {
                    'key' : ''
                    },
                name = '',
                owner_id = '',
                owner_type = '',
                policy_validation = nuon.models.app/workflow_step_policy_validation.app.WorkflowStepPolicyValidation(
                    created_at = '', 
                    created_by_id = '', 
                    id = '', 
                    install_workflow_step_id = '', 
                    response = '', 
                    runner_job_id = '', 
                    status = null, 
                    updated_at = '', ),
                retried = True,
                retryable = True,
                skippable = True,
                started_at = '',
                status = nuon.models.app/composite_status.app.CompositeStatus(
                    created_at_ts = 56, 
                    created_by_id = '', 
                    history = [
                        nuon.models.app/composite_status.app.CompositeStatus(
                            created_at_ts = 56, 
                            created_by_id = '', 
                            metadata = {
                                'key' : null
                                }, 
                            status = 'error', 
                            status_human_description = '', )
                        ], 
                    metadata = {
                        'key' : null
                        }, 
                    status = 'error', 
                    status_human_description = '', ),
                step_target_id = '',
                step_target_type = '',
                updated_at = '',
                workflow_id = ''
            )
        else:
            return AppWorkflowStep(
        )
        """

    def testAppWorkflowStep(self):
        """Test AppWorkflowStep"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
