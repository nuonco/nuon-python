# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nuon.models.app_install_action_workflow import AppInstallActionWorkflow

class TestAppInstallActionWorkflow(unittest.TestCase):
    """AppInstallActionWorkflow unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppInstallActionWorkflow:
        """Test AppInstallActionWorkflow
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppInstallActionWorkflow`
        """
        model = AppInstallActionWorkflow()
        if include_optional:
            return AppInstallActionWorkflow(
                action_workflow = nuon.models.app/action_workflow.app.ActionWorkflow(
                    app_id = '', 
                    config_count = 56, 
                    configs = [
                        nuon.models.app/action_workflow_config.app.ActionWorkflowConfig(
                            action_workflow_id = '', 
                            app_config_id = '', 
                            app_id = '', 
                            component_dependency_ids = [
                                ''
                                ], 
                            created_at = '', 
                            created_by_id = '', 
                            id = '', 
                            references = [
                                ''
                                ], 
                            refs = [
                                nuon.models.refs/ref.refs.Ref(
                                    input = '', 
                                    name = '', 
                                    type = 'sandbox', 
                                    value = '', )
                                ], 
                            steps = [
                                nuon.models.app/action_workflow_step_config.app.ActionWorkflowStepConfig(
                                    action_workflow_config_id = '', 
                                    app_config_id = '', 
                                    app_id = '', 
                                    command = '', 
                                    connected_github_vcs_config = nuon.models.app/connected_github_vcs_config.app.ConnectedGithubVCSConfig(
                                        branch = '', 
                                        component_config_id = '', 
                                        component_config_type = '', 
                                        created_at = '', 
                                        created_by_id = '', 
                                        directory = '', 
                                        id = '', 
                                        repo = '', 
                                        repo_name = '', 
                                        repo_owner = '', 
                                        updated_at = '', 
                                        vcs_connection = nuon.models.app/vcs_connection.app.VCSConnection(
                                            created_at = '', 
                                            created_by_id = '', 
                                            github_install_id = '', 
                                            id = '', 
                                            updated_at = '', 
                                            vcs_connection_commit = [
                                                nuon.models.app/vcs_connection_commit.app.VCSConnectionCommit(
                                                    author_email = '', 
                                                    author_name = '', 
                                                    created_at = '', 
                                                    created_by_id = '', 
                                                    id = '', 
                                                    message = '', 
                                                    sha = '', 
                                                    updated_at = '', 
                                                    vcs_connection_id = '', )
                                                ], ), 
                                        vcs_connection_id = '', ), 
                                    created_at = '', 
                                    created_by_id = '', 
                                    env_vars = {
                                        'key' : ''
                                        }, 
                                    id = '', 
                                    idx = 56, 
                                    inline_contents = '', 
                                    name = '', 
                                    previous_step_id = '', 
                                    public_git_vcs_config = null, 
                                    updated_at = '', )
                                ], 
                            timeout = 56, 
                            triggers = [
                                nuon.models.app/action_workflow_trigger_config.app.ActionWorkflowTriggerConfig(
                                    action_workflow_config_id = '', 
                                    app_config_id = '', 
                                    app_id = '', 
                                    component = nuon.models.app/component.app.Component(
                                        app_id = '', 
                                        config_versions = 56, 
                                        created_at = '', 
                                        created_by_id = '', 
                                        dependencies = [
                                            ''
                                            ], 
                                        id = '', 
                                        links = {
                                            'key' : null
                                            }, 
                                        name = '', 
                                        resolved_var_name = '', 
                                        status = '', 
                                        status_description = '', 
                                        updated_at = '', 
                                        var_name = '', ), 
                                    component_id = '', 
                                    created_at = '', 
                                    created_by_id = '', 
                                    cron_schedule = '', 
                                    id = '', 
                                    updated_at = '', )
                                ], 
                            updated_at = '', )
                        ], 
                    created_at = '', 
                    created_by_id = '', 
                    id = '', 
                    name = '', 
                    status = '', 
                    status_description = '', 
                    updated_at = '', ),
                action_workflow_id = '',
                created_at = '',
                created_by_id = '',
                id = '',
                install_id = '',
                runs = [
                    nuon.models.app/install_action_workflow_run.app.InstallActionWorkflowRun(
                        action_workflow_config_id = '', 
                        config = nuon.models.app/action_workflow_config.app.ActionWorkflowConfig(
                            action_workflow_id = '', 
                            app_config_id = '', 
                            app_id = '', 
                            component_dependency_ids = [
                                ''
                                ], 
                            created_at = '', 
                            created_by_id = '', 
                            id = '', 
                            references = [
                                ''
                                ], 
                            refs = [
                                nuon.models.refs/ref.refs.Ref(
                                    input = '', 
                                    name = '', 
                                    type = 'sandbox', 
                                    value = '', )
                                ], 
                            steps = [
                                nuon.models.app/action_workflow_step_config.app.ActionWorkflowStepConfig(
                                    action_workflow_config_id = '', 
                                    app_config_id = '', 
                                    app_id = '', 
                                    command = '', 
                                    connected_github_vcs_config = nuon.models.app/connected_github_vcs_config.app.ConnectedGithubVCSConfig(
                                        branch = '', 
                                        component_config_id = '', 
                                        component_config_type = '', 
                                        created_at = '', 
                                        created_by_id = '', 
                                        directory = '', 
                                        id = '', 
                                        repo = '', 
                                        repo_name = '', 
                                        repo_owner = '', 
                                        updated_at = '', 
                                        vcs_connection = nuon.models.app/vcs_connection.app.VCSConnection(
                                            created_at = '', 
                                            created_by_id = '', 
                                            github_install_id = '', 
                                            id = '', 
                                            updated_at = '', 
                                            vcs_connection_commit = [
                                                nuon.models.app/vcs_connection_commit.app.VCSConnectionCommit(
                                                    author_email = '', 
                                                    author_name = '', 
                                                    created_at = '', 
                                                    created_by_id = '', 
                                                    id = '', 
                                                    message = '', 
                                                    sha = '', 
                                                    updated_at = '', 
                                                    vcs_connection_id = '', )
                                                ], ), 
                                        vcs_connection_id = '', ), 
                                    created_at = '', 
                                    created_by_id = '', 
                                    env_vars = {
                                        'key' : ''
                                        }, 
                                    id = '', 
                                    idx = 56, 
                                    inline_contents = '', 
                                    name = '', 
                                    previous_step_id = '', 
                                    public_git_vcs_config = null, 
                                    updated_at = '', )
                                ], 
                            timeout = 56, 
                            triggers = [
                                nuon.models.app/action_workflow_trigger_config.app.ActionWorkflowTriggerConfig(
                                    action_workflow_config_id = '', 
                                    app_config_id = '', 
                                    app_id = '', 
                                    component = nuon.models.app/component.app.Component(
                                        app_id = '', 
                                        config_versions = 56, 
                                        created_at = '', 
                                        created_by_id = '', 
                                        dependencies = [
                                            ''
                                            ], 
                                        id = '', 
                                        links = {
                                            'key' : null
                                            }, 
                                        name = '', 
                                        resolved_var_name = '', 
                                        status = '', 
                                        status_description = '', 
                                        updated_at = '', 
                                        var_name = '', ), 
                                    component_id = '', 
                                    created_at = '', 
                                    created_by_id = '', 
                                    cron_schedule = '', 
                                    id = '', 
                                    updated_at = '', )
                                ], 
                            updated_at = '', ), 
                        created_at = '', 
                        created_by = nuon.models.app/account.app.Account(
                            account_type = 'auth0', 
                            created_at = '', 
                            email = '', 
                            id = '', 
                            org_ids = [
                                ''
                                ], 
                            permissions = {
                                'key' : 'unknown'
                                }, 
                            roles = [
                                nuon.models.app/role.app.Role(
                                    created_by = nuon.models.app/account.app.Account(
                                        created_at = '', 
                                        email = '', 
                                        id = '', 
                                        subject = '', 
                                        updated_at = '', ), 
                                    created_at = '', 
                                    created_by_id = '', 
                                    id = '', 
                                    policies = [
                                        nuon.models.app/policy.app.Policy(
                                            created_at = '', 
                                            created_by_id = '', 
                                            id = '', 
                                            name = 'org_admin', 
                                            role_id = '', 
                                            updated_at = '', )
                                        ], 
                                    role_type = 'org_admin', 
                                    updated_at = '', )
                                ], 
                            subject = '', 
                            updated_at = '', ), 
                        created_by_id = '', 
                        execution_time = 56, 
                        id = '', 
                        install_action_workflow = nuon.models.app/install_action_workflow.app.InstallActionWorkflow(
                            action_workflow = nuon.models.app/action_workflow.app.ActionWorkflow(
                                app_id = '', 
                                config_count = 56, 
                                configs = [
                                    nuon.models.app/action_workflow_config.app.ActionWorkflowConfig(
                                        action_workflow_id = '', 
                                        app_config_id = '', 
                                        app_id = '', 
                                        created_at = '', 
                                        created_by_id = '', 
                                        id = '', 
                                        timeout = 56, 
                                        updated_at = '', )
                                    ], 
                                created_at = '', 
                                created_by_id = '', 
                                id = '', 
                                status = '', 
                                status_description = '', 
                                updated_at = '', ), 
                            action_workflow_id = '', 
                            created_at = '', 
                            created_by_id = '', 
                            id = '', 
                            install_id = '', 
                            status = '', 
                            updated_at = '', ), 
                        install_action_workflow_id = '', 
                        install_id = '', 
                        install_workflow_id = '', 
                        log_stream = nuon.models.app/log_stream.app.LogStream(
                            attrs = {
                                'key' : ''
                                }, 
                            created_at = '', 
                            created_by_id = '', 
                            id = '', 
                            open = True, 
                            org_id = '', 
                            owner_id = '', 
                            owner_type = '', 
                            runner_api_url = '', 
                            updated_at = '', 
                            write_token = '', ), 
                        outputs = { }, 
                        run_env_vars = {
                            'key' : ''
                            }, 
                        runner_job = nuon.models.app/runner_job.app.RunnerJob(
                            available_timeout = 56, 
                            created_at = '', 
                            created_by_id = '', 
                            execution_count = 56, 
                            execution_time = 56, 
                            execution_timeout = 56, 
                            executions = [
                                nuon.models.app/runner_job_execution.app.RunnerJobExecution(
                                    created_at = '', 
                                    created_by_id = '', 
                                    id = '', 
                                    org_id = '', 
                                    result = nuon.models.app/runner_job_execution_result.app.RunnerJobExecutionResult(
                                        contents = '', 
                                        contents_display = '', 
                                        contents_display_gzip = '', 
                                        contents_gzip = '', 
                                        created_at = '', 
                                        created_by_id = '', 
                                        error_code = 56, 
                                        error_metadata = {
                                            'key' : ''
                                            }, 
                                        id = '', 
                                        org_id = '', 
                                        runner_job_execution_id = '', 
                                        success = True, 
                                        updated_at = '', ), 
                                    runner_job_id = '', 
                                    status = 'pending', 
                                    updated_at = '', )
                                ], 
                            final_runner_job_execution_id = '', 
                            finished_at = '', 
                            group = 'health-checks', 
                            id = '', 
                            log_stream_id = '', 
                            max_executions = 56, 
                            metadata = {
                                'key' : ''
                                }, 
                            operation = 'exec', 
                            org_id = '', 
                            outputs_json = '', 
                            overall_timeout = 56, 
                            owner_id = '', 
                            owner_type = '', 
                            queue_timeout = 56, 
                            runner_id = '', 
                            started_at = '', 
                            status = 'queued', 
                            status_description = '', 
                            updated_at = '', ), 
                        status = '', 
                        status_description = '', 
                        status_v2 = nuon.models.app/composite_status.app.CompositeStatus(
                            created_at_ts = 56, 
                            created_by_id = '', 
                            history = [
                                nuon.models.app/composite_status.app.CompositeStatus(
                                    created_at_ts = 56, 
                                    created_by_id = '', 
                                    status_human_description = '', )
                                ], 
                            status_human_description = '', ), 
                        steps = [
                            nuon.models.app/install_action_workflow_run_step.app.InstallActionWorkflowRunStep(
                                created_at = '', 
                                created_by_id = '', 
                                execution_duration = 56, 
                                id = '', 
                                install_action_workflow_run_id = '', 
                                step_id = '', 
                                updated_at = '', )
                            ], 
                        trigger_type = 'manual', 
                        triggered_by_id = '', 
                        triggered_by_type = '', 
                        updated_at = '', 
                        workflow = nuon.models.app/workflow.app.Workflow(
                            approval_option = 'approve-all', 
                            created_at = '', 
                            created_by_id = '', 
                            execution_time = 56, 
                            finished = True, 
                            finished_at = '', 
                            id = '', 
                            install_action_workflow_runs = [
                                nuon.models.app/install_action_workflow_run.app.InstallActionWorkflowRun(
                                    action_workflow_config_id = '', 
                                    created_at = '', 
                                    created_by_id = '', 
                                    execution_time = 56, 
                                    id = '', 
                                    install_action_workflow_id = '', 
                                    install_id = '', 
                                    install_workflow_id = '', 
                                    status_description = '', 
                                    triggered_by_id = '', 
                                    triggered_by_type = '', 
                                    updated_at = '', 
                                    workflow_id = '', )
                                ], 
                            install_deploys = [
                                nuon.models.app/install_deploy.app.InstallDeploy(
                                    action_workflow_runs = [
                                        
                                        ], 
                                    build_id = '', 
                                    component_build = nuon.models.app/component_build.app.ComponentBuild(
                                        checksum = '', 
                                        component_config_connection = nuon.models.app/component_config_connection.app.ComponentConfigConnection(
                                            app_config_id = '', 
                                            app_config_version = 56, 
                                            checksum = '', 
                                            component_id = '', 
                                            component_name = '', 
                                            created_at = '', 
                                            created_by_id = '', 
                                            docker_build = nuon.models.app/docker_build_component_config.app.DockerBuildComponentConfig(
                                                build_args = [
                                                    ''
                                                    ], 
                                                component_config_connection_id = '', 
                                                created_at = '', 
                                                created_by_id = '', 
                                                dockerfile = '', 
                                                id = '', 
                                                public_git_vcs_config = nuon.models.app/public_git_vcs_config.app.PublicGitVCSConfig(
                                                    branch = '', 
                                                    component_config_id = '', 
                                                    component_config_type = '', 
                                                    created_at = '', 
                                                    created_by_id = '', 
                                                    directory = '', 
                                                    id = '', 
                                                    repo = '', 
                                                    updated_at = '', ), 
                                                target = '', 
                                                updated_at = '', ), 
                                            external_image = nuon.models.app/external_image_component_config.app.ExternalImageComponentConfig(
                                                aws_ecr_image_config = nuon.models.app/awsecr_image_config.app.AWSECRImageConfig(
                                                    aws_region = '', 
                                                    component_config_id = '', 
                                                    component_config_type = '', 
                                                    created_at = '', 
                                                    created_by_id = '', 
                                                    iam_role_arn = '', 
                                                    id = '', 
                                                    updated_at = '', ), 
                                                component_config_connection_id = '', 
                                                created_at = '', 
                                                created_by_id = '', 
                                                id = '', 
                                                image_url = '', 
                                                tag = '', 
                                                updated_at = '', ), 
                                            helm = nuon.models.app/helm_component_config.app.HelmComponentConfig(
                                                chart_name = '', 
                                                component_config_connection_id = '', 
                                                created_at = '', 
                                                created_by_id = '', 
                                                helm_config_json = nuon.models.app/helm_config.app.HelmConfig(
                                                    chart_name = '', 
                                                    namespace = '', 
                                                    storage_driver = '', 
                                                    take_ownership = True, 
                                                    values = {
                                                        'key' : ''
                                                        }, 
                                                    values_files = [
                                                        ''
                                                        ], ), 
                                                id = '', 
                                                namespace = '', 
                                                storage_driver = '', 
                                                take_ownership = True, 
                                                updated_at = '', 
                                                values = {
                                                    'key' : ''
                                                    }, 
                                                values_files = [
                                                    ''
                                                    ], ), 
                                            id = '', 
                                            job = nuon.models.app/job_component_config.app.JobComponentConfig(
                                                args = [
                                                    ''
                                                    ], 
                                                cmd = [
                                                    ''
                                                    ], 
                                                component_config_connection_id = '', 
                                                created_at = '', 
                                                created_by_id = '', 
                                                id = '', 
                                                image_url = '', 
                                                tag = '', 
                                                updated_at = '', ), 
                                            kubernetes_manifest = nuon.models.app/kubernetes_manifest_component_config.app.KubernetesManifestComponentConfig(
                                                component_config_connection_id = '', 
                                                created_at = '', 
                                                created_by_id = '', 
                                                id = '', 
                                                manifest = '', 
                                                namespace = '', 
                                                updated_at = '', ), 
                                            terraform_module = nuon.models.app/terraform_module_component_config.app.TerraformModuleComponentConfig(
                                                component_config_connection_id = '', 
                                                created_at = '', 
                                                created_by_id = '', 
                                                id = '', 
                                                updated_at = '', 
                                                variables = {
                                                    'key' : ''
                                                    }, 
                                                variables_files = [
                                                    ''
                                                    ], 
                                                version = '', ), 
                                            updated_at = '', 
                                            version = 56, ), 
                                        component_config_connection_id = '', 
                                        component_config_version = 56, 
                                        component_id = '', 
                                        component_name = '', 
                                        created_at = '', 
                                        created_by_id = '', 
                                        git_ref = '', 
                                        id = '', 
                                        releases = [
                                            nuon.models.app/component_release.app.ComponentRelease(
                                                build_id = '', 
                                                created_at = '', 
                                                created_by_id = '', 
                                                id = '', 
                                                release_steps = [
                                                    nuon.models.app/component_release_step.app.ComponentReleaseStep(
                                                        component_release_id = '', 
                                                        created_at = '', 
                                                        created_by_id = '', 
                                                        delay = '', 
                                                        id = '', 
                                                        requested_install_ids = [
                                                            ''
                                                            ], 
                                                        status_description = '', 
                                                        updated_at = '', )
                                                    ], 
                                                status_description = '', 
                                                total_release_steps = 56, 
                                                updated_at = '', )
                                            ], 
                                        status_description = '', 
                                        updated_at = '', ), 
                                    component_config_version = 56, 
                                    component_id = '', 
                                    component_name = '', 
                                    created_at = '', 
                                    created_by_id = '', 
                                    id = '', 
                                    install_component_id = '', 
                                    install_deploy_type = 'sync-image', 
                                    install_id = '', 
                                    install_workflow_id = '', 
                                    oci_artifact = nuon.models.app/oci_artifact.app.OCIArtifact(
                                        annotations = {
                                            'key' : ''
                                            }, 
                                        architecture = '', 
                                        artifact_type = '', 
                                        created_at = '', 
                                        created_by_id = '', 
                                        digest = '', 
                                        id = '', 
                                        media_type = '', 
                                        org_id = '', 
                                        os = '', 
                                        os_features = [
                                            ''
                                            ], 
                                        os_version = '', 
                                        owner_id = '', 
                                        owner_type = '', 
                                        repository = '', 
                                        size = 56, 
                                        tag = '', 
                                        updated_at = '', 
                                        urls = [
                                            ''
                                            ], 
                                        variant = '', ), 
                                    release_id = '', 
                                    runner_jobs = [
                                        nuon.models.app/runner_job.app.RunnerJob(
                                            available_timeout = 56, 
                                            created_at = '', 
                                            created_by_id = '', 
                                            execution_count = 56, 
                                            execution_time = 56, 
                                            execution_timeout = 56, 
                                            final_runner_job_execution_id = '', 
                                            finished_at = '', 
                                            id = '', 
                                            log_stream_id = '', 
                                            max_executions = 56, 
                                            org_id = '', 
                                            outputs_json = '', 
                                            overall_timeout = 56, 
                                            owner_id = '', 
                                            owner_type = '', 
                                            queue_timeout = 56, 
                                            runner_id = '', 
                                            started_at = '', 
                                            status_description = '', 
                                            updated_at = '', )
                                        ], 
                                    status_description = '', 
                                    updated_at = '', 
                                    workflow_id = '', )
                                ], 
                            install_sandbox_runs = [
                                nuon.models.app/install_sandbox_run.app.InstallSandboxRun(
                                    app_sandbox_config = nuon.models.app/app_sandbox_config.app.AppSandboxConfig(
                                        app_config_id = '', 
                                        app_id = '', 
                                        aws_region_type = '', 
                                        cloud_platform = '', 
                                        created_at = '', 
                                        created_by_id = '', 
                                        id = '', 
                                        org_id = '', 
                                        terraform_version = '', 
                                        updated_at = '', ), 
                                    created_at = '', 
                                    created_by_id = '', 
                                    id = '', 
                                    install_id = '', 
                                    install_sandbox_id = '', 
                                    install_workflow_id = '', 
                                    run_type = 'provision', 
                                    status_description = '', 
                                    updated_at = '', 
                                    workflow_id = '', )
                                ], 
                            owner_id = '', 
                            owner_type = '', 
                            plan_only = True, 
                            started_at = '', 
                            step_error_behavior = 'abort', 
                            updated_at = '', ), 
                        workflow_id = '', )
                    ],
                status = '',
                updated_at = ''
            )
        else:
            return AppInstallActionWorkflow(
        )
        """

    def testAppInstallActionWorkflow(self):
        """Test AppInstallActionWorkflow"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
