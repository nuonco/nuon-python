# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nuon.models.service_create_app_permissions_config_request import ServiceCreateAppPermissionsConfigRequest

class TestServiceCreateAppPermissionsConfigRequest(unittest.TestCase):
    """ServiceCreateAppPermissionsConfigRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServiceCreateAppPermissionsConfigRequest:
        """Test ServiceCreateAppPermissionsConfigRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServiceCreateAppPermissionsConfigRequest`
        """
        model = ServiceCreateAppPermissionsConfigRequest()
        if include_optional:
            return ServiceCreateAppPermissionsConfigRequest(
                app_config_id = '',
                deprovision_role = nuon.models.service/app_awsiam_role_config.service.AppAWSIAMRoleConfig(
                    description = '', 
                    display_name = '', 
                    name = '', 
                    permissions_boundary = '', 
                    policies = [
                        nuon.models.service/app_awsiam_policy_config.service.AppAWSIAMPolicyConfig(
                            contents = '', 
                            managed_policy_name = '', 
                            name = '', )
                        ], ),
                maintenance_role = nuon.models.service/app_awsiam_role_config.service.AppAWSIAMRoleConfig(
                    description = '', 
                    display_name = '', 
                    name = '', 
                    permissions_boundary = '', 
                    policies = [
                        nuon.models.service/app_awsiam_policy_config.service.AppAWSIAMPolicyConfig(
                            contents = '', 
                            managed_policy_name = '', 
                            name = '', )
                        ], ),
                provision_role = nuon.models.service/app_awsiam_role_config.service.AppAWSIAMRoleConfig(
                    description = '', 
                    display_name = '', 
                    name = '', 
                    permissions_boundary = '', 
                    policies = [
                        nuon.models.service/app_awsiam_policy_config.service.AppAWSIAMPolicyConfig(
                            contents = '', 
                            managed_policy_name = '', 
                            name = '', )
                        ], )
            )
        else:
            return ServiceCreateAppPermissionsConfigRequest(
                app_config_id = '',
                deprovision_role = nuon.models.service/app_awsiam_role_config.service.AppAWSIAMRoleConfig(
                    description = '', 
                    display_name = '', 
                    name = '', 
                    permissions_boundary = '', 
                    policies = [
                        nuon.models.service/app_awsiam_policy_config.service.AppAWSIAMPolicyConfig(
                            contents = '', 
                            managed_policy_name = '', 
                            name = '', )
                        ], ),
                maintenance_role = nuon.models.service/app_awsiam_role_config.service.AppAWSIAMRoleConfig(
                    description = '', 
                    display_name = '', 
                    name = '', 
                    permissions_boundary = '', 
                    policies = [
                        nuon.models.service/app_awsiam_policy_config.service.AppAWSIAMPolicyConfig(
                            contents = '', 
                            managed_policy_name = '', 
                            name = '', )
                        ], ),
                provision_role = nuon.models.service/app_awsiam_role_config.service.AppAWSIAMRoleConfig(
                    description = '', 
                    display_name = '', 
                    name = '', 
                    permissions_boundary = '', 
                    policies = [
                        nuon.models.service/app_awsiam_policy_config.service.AppAWSIAMPolicyConfig(
                            contents = '', 
                            managed_policy_name = '', 
                            name = '', )
                        ], ),
        )
        """

    def testServiceCreateAppPermissionsConfigRequest(self):
        """Test ServiceCreateAppPermissionsConfigRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
