# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nuon.models.service_create_action_workflow_config_request import ServiceCreateActionWorkflowConfigRequest

class TestServiceCreateActionWorkflowConfigRequest(unittest.TestCase):
    """ServiceCreateActionWorkflowConfigRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServiceCreateActionWorkflowConfigRequest:
        """Test ServiceCreateActionWorkflowConfigRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServiceCreateActionWorkflowConfigRequest`
        """
        model = ServiceCreateActionWorkflowConfigRequest()
        if include_optional:
            return ServiceCreateActionWorkflowConfigRequest(
                app_config_id = '',
                dependencies = [
                    ''
                    ],
                references = [
                    ''
                    ],
                steps = [
                    nuon.models.service/create_action_workflow_config_step_request.service.CreateActionWorkflowConfigStepRequest(
                        command = '', 
                        connected_github_vcs_config = nuon.models.service/connected_github_vcs_action_workflow_config_request.service.ConnectedGithubVCSActionWorkflowConfigRequest(
                            branch = '', 
                            directory = '', 
                            git_ref = '', 
                            repo = '', ), 
                        env_vars = {
                            'key' : ''
                            }, 
                        inline_contents = '', 
                        name = '', 
                        public_git_vcs_config = nuon.models.service/public_git_vcs_action_workflow_config_request.service.PublicGitVCSActionWorkflowConfigRequest(
                            branch = '', 
                            directory = '', 
                            repo = '', ), 
                        references = [
                            ''
                            ], )
                    ],
                timeout = 56,
                triggers = [
                    nuon.models.service/create_action_workflow_config_trigger_request.service.CreateActionWorkflowConfigTriggerRequest(
                        component_name = '', 
                        cron_schedule = '', 
                        type = 'manual', )
                    ]
            )
        else:
            return ServiceCreateActionWorkflowConfigRequest(
                app_config_id = '',
                steps = [
                    nuon.models.service/create_action_workflow_config_step_request.service.CreateActionWorkflowConfigStepRequest(
                        command = '', 
                        connected_github_vcs_config = nuon.models.service/connected_github_vcs_action_workflow_config_request.service.ConnectedGithubVCSActionWorkflowConfigRequest(
                            branch = '', 
                            directory = '', 
                            git_ref = '', 
                            repo = '', ), 
                        env_vars = {
                            'key' : ''
                            }, 
                        inline_contents = '', 
                        name = '', 
                        public_git_vcs_config = nuon.models.service/public_git_vcs_action_workflow_config_request.service.PublicGitVCSActionWorkflowConfigRequest(
                            branch = '', 
                            directory = '', 
                            repo = '', ), 
                        references = [
                            ''
                            ], )
                    ],
                triggers = [
                    nuon.models.service/create_action_workflow_config_trigger_request.service.CreateActionWorkflowConfigTriggerRequest(
                        component_name = '', 
                        cron_schedule = '', 
                        type = 'manual', )
                    ],
        )
        """

    def testServiceCreateActionWorkflowConfigRequest(self):
        """Test ServiceCreateActionWorkflowConfigRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
