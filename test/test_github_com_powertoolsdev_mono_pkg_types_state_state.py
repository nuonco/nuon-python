# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nuon.models.github_com_powertoolsdev_mono_pkg_types_state_state import GithubComPowertoolsdevMonoPkgTypesStateState

class TestGithubComPowertoolsdevMonoPkgTypesStateState(unittest.TestCase):
    """GithubComPowertoolsdevMonoPkgTypesStateState unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GithubComPowertoolsdevMonoPkgTypesStateState:
        """Test GithubComPowertoolsdevMonoPkgTypesStateState
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GithubComPowertoolsdevMonoPkgTypesStateState`
        """
        model = GithubComPowertoolsdevMonoPkgTypesStateState()
        if include_optional:
            return GithubComPowertoolsdevMonoPkgTypesStateState(
                actions = nuon.models.state/actions_state.state.ActionsState(
                    populated = True, 
                    workflows = {
                        'key' : nuon.models.state/action_workflow_state.state.ActionWorkflowState(
                            id = '', 
                            outputs = {
                                'key' : null
                                }, 
                            populated = True, 
                            status = '', )
                        }, ),
                app = nuon.models.state/app_state.state.AppState(
                    id = '', 
                    name = '', 
                    populated = True, 
                    secrets = {
                        'key' : ''
                        }, 
                    status = '', ),
                cloud_account = nuon.models.state/cloud_account.state.CloudAccount(
                    aws = nuon.models.state/aws_cloud_account.state.AWSCloudAccount(
                        region = '', ), 
                    azure = nuon.models.state/azure_cloud_account.state.AzureCloudAccount(
                        location = '', ), ),
                components = {
                    'key' : null
                    },
                domain = nuon.models.state/domain_state.state.DomainState(
                    internal_domain = '', 
                    populated = True, 
                    public_domain = '', ),
                id = '',
                inputs = nuon.models.state/inputs_state.state.InputsState(
                    inputs = {
                        'key' : ''
                        }, 
                    populated = True, ),
                install = nuon.models.state/install_state.state.InstallState(
                    id = '', 
                    inputs = {
                        'key' : ''
                        }, 
                    internal_domain = '', 
                    name = '', 
                    populated = True, 
                    public_domain = '', 
                    sandbox = nuon.models.state/sandbox_state.state.SandboxState(
                        outputs = { }, 
                        populated = True, 
                        recent_runs = [
                            nuon.models.state/sandbox_state.state.SandboxState(
                                populated = True, 
                                status = '', 
                                type = '', 
                                version = '', )
                            ], 
                        status = '', 
                        type = '', 
                        version = '', ), ),
                install_stack = nuon.models.state/install_stack_state.state.InstallStackState(
                    checksum = '', 
                    outputs = {
                        'key' : ''
                        }, 
                    populated = True, 
                    quick_link_url = '', 
                    status = '', 
                    template_json = '', 
                    template_url = '', ),
                name = '',
                org = nuon.models.state/org_state.state.OrgState(
                    id = '', 
                    name = '', 
                    populated = True, 
                    status = '', ),
                runner = nuon.models.state/runner_state.state.RunnerState(
                    id = '', 
                    populated = True, 
                    runner_group_id = '', 
                    status = '', ),
                sandbox = nuon.models.state/sandbox_state.state.SandboxState(
                    outputs = { }, 
                    populated = True, 
                    recent_runs = [
                        nuon.models.state/sandbox_state.state.SandboxState(
                            populated = True, 
                            status = '', 
                            type = '', 
                            version = '', )
                        ], 
                    status = '', 
                    type = '', 
                    version = '', ),
                secrets = {
                    'key' : nuon.models.outputs/secret_sync_output.outputs.SecretSyncOutput(
                        arn = '', 
                        exists = True, 
                        kubernetes_key = '', 
                        kubernetes_name = '', 
                        kubernetes_namespace = '', 
                        length = 56, 
                        name = '', 
                        timestamp = '', )
                    }
            )
        else:
            return GithubComPowertoolsdevMonoPkgTypesStateState(
        )
        """

    def testGithubComPowertoolsdevMonoPkgTypesStateState(self):
        """Test GithubComPowertoolsdevMonoPkgTypesStateState"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
