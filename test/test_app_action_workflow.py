# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nuon.models.app_action_workflow import AppActionWorkflow

class TestAppActionWorkflow(unittest.TestCase):
    """AppActionWorkflow unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppActionWorkflow:
        """Test AppActionWorkflow
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppActionWorkflow`
        """
        model = AppActionWorkflow()
        if include_optional:
            return AppActionWorkflow(
                app_id = '',
                config_count = 56,
                configs = [
                    nuon.models.app/action_workflow_config.app.ActionWorkflowConfig(
                        action_workflow_id = '', 
                        app_config_id = '', 
                        app_id = '', 
                        component_dependency_ids = [
                            ''
                            ], 
                        created_at = '', 
                        created_by_id = '', 
                        id = '', 
                        references = [
                            ''
                            ], 
                        refs = [
                            nuon.models.refs/ref.refs.Ref(
                                input = '', 
                                name = '', 
                                type = 'sandbox', 
                                value = '', )
                            ], 
                        steps = [
                            nuon.models.app/action_workflow_step_config.app.ActionWorkflowStepConfig(
                                action_workflow_config_id = '', 
                                app_config_id = '', 
                                app_id = '', 
                                command = '', 
                                connected_github_vcs_config = nuon.models.app/connected_github_vcs_config.app.ConnectedGithubVCSConfig(
                                    branch = '', 
                                    component_config_id = '', 
                                    component_config_type = '', 
                                    created_at = '', 
                                    created_by_id = '', 
                                    directory = '', 
                                    id = '', 
                                    repo = '', 
                                    repo_name = '', 
                                    repo_owner = '', 
                                    updated_at = '', 
                                    vcs_connection = nuon.models.app/vcs_connection.app.VCSConnection(
                                        created_at = '', 
                                        created_by_id = '', 
                                        github_install_id = '', 
                                        id = '', 
                                        updated_at = '', 
                                        vcs_connection_commit = [
                                            nuon.models.app/vcs_connection_commit.app.VCSConnectionCommit(
                                                author_email = '', 
                                                author_name = '', 
                                                created_at = '', 
                                                created_by_id = '', 
                                                id = '', 
                                                message = '', 
                                                sha = '', 
                                                updated_at = '', 
                                                vcs_connection_id = '', )
                                            ], ), 
                                    vcs_connection_id = '', ), 
                                created_at = '', 
                                created_by_id = '', 
                                env_vars = {
                                    'key' : ''
                                    }, 
                                id = '', 
                                idx = 56, 
                                inline_contents = '', 
                                name = '', 
                                previous_step_id = '', 
                                public_git_vcs_config = null, 
                                updated_at = '', )
                            ], 
                        timeout = 56, 
                        triggers = [
                            nuon.models.app/action_workflow_trigger_config.app.ActionWorkflowTriggerConfig(
                                action_workflow_config_id = '', 
                                app_config_id = '', 
                                app_id = '', 
                                component = nuon.models.app/component.app.Component(
                                    app_id = '', 
                                    config_versions = 56, 
                                    created_at = '', 
                                    created_by_id = '', 
                                    dependencies = [
                                        ''
                                        ], 
                                    id = '', 
                                    links = {
                                        'key' : null
                                        }, 
                                    name = '', 
                                    resolved_var_name = '', 
                                    status = '', 
                                    status_description = '', 
                                    updated_at = '', 
                                    var_name = '', ), 
                                component_id = '', 
                                created_at = '', 
                                created_by_id = '', 
                                cron_schedule = '', 
                                id = '', 
                                updated_at = '', )
                            ], 
                        updated_at = '', )
                    ],
                created_at = '',
                created_by_id = '',
                id = '',
                name = '',
                status = '',
                status_description = '',
                updated_at = ''
            )
        else:
            return AppActionWorkflow(
        )
        """

    def testAppActionWorkflow(self):
        """Test AppActionWorkflow"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
