# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nuon.models.app_install_stack import AppInstallStack

class TestAppInstallStack(unittest.TestCase):
    """AppInstallStack unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppInstallStack:
        """Test AppInstallStack
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppInstallStack`
        """
        model = AppInstallStack()
        if include_optional:
            return AppInstallStack(
                created_at = '',
                created_by_id = '',
                id = '',
                install_id = '',
                install_stack_outputs = nuon.models.app/install_stack_outputs.app.InstallStackOutputs(
                    aws = nuon.models.app/aws_stack_outputs.app.AWSStackOutputs(
                        account_id = '', 
                        deprovision_iam_role_arn = '', 
                        maintenance_iam_role_arn = '', 
                        private_subnets = [
                            ''
                            ], 
                        provision_iam_role_arn = '', 
                        public_subnets = [
                            ''
                            ], 
                        region = '', 
                        runner_iam_role_arn = '', 
                        runner_subnet = '', 
                        vpc_id = '', ), 
                    azure = nuon.models.app/azure_stack_outputs.app.AzureStackOutputs(
                        key_vault_id = '', 
                        key_vault_name = '', 
                        network_id = '', 
                        network_name = '', 
                        private_subnet_ids = [
                            ''
                            ], 
                        private_subnet_names = [
                            ''
                            ], 
                        public_subnet_ids = [
                            ''
                            ], 
                        public_subnet_names = [
                            ''
                            ], 
                        resource_group_id = '', 
                        resource_group_location = '', 
                        resource_group_name = '', 
                        subscription_id = '', 
                        subscription_tenant_id = '', ), 
                    created_at = '', 
                    created_by_id = '', 
                    data = {
                        'key' : ''
                        }, 
                    id = '', 
                    install_stack_id = '', 
                    install_version_run_id = '', 
                    org_id = '', 
                    updated_at = '', ),
                org_id = '',
                updated_at = '',
                versions = [
                    nuon.models.app/install_stack_version.app.InstallStackVersion(
                        app_config_id = '', 
                        aws_bucket_key = '', 
                        aws_bucket_name = '', 
                        checksum = '', 
                        composite_status = nuon.models.app/composite_status.app.CompositeStatus(
                            created_at_ts = 56, 
                            created_by_id = '', 
                            history = [
                                nuon.models.app/composite_status.app.CompositeStatus(
                                    created_at_ts = 56, 
                                    created_by_id = '', 
                                    metadata = {
                                        'key' : null
                                        }, 
                                    status = 'error', 
                                    status_human_description = '', )
                                ], 
                            metadata = {
                                'key' : null
                                }, 
                            status = 'error', 
                            status_human_description = '', ), 
                        contents = '', 
                        created_at = '', 
                        created_by_id = '', 
                        id = '', 
                        install_id = '', 
                        install_stack_id = '', 
                        org_id = '', 
                        phone_home_id = '', 
                        phone_home_url = '', 
                        quick_link_url = '', 
                        runs = [
                            nuon.models.app/install_stack_version_run.app.InstallStackVersionRun(
                                created_at = '', 
                                created_by_id = '', 
                                data = {
                                    'key' : ''
                                    }, 
                                id = '', 
                                updated_at = '', )
                            ], 
                        template_url = '', 
                        updated_at = '', )
                    ]
            )
        else:
            return AppInstallStack(
        )
        """

    def testAppInstallStack(self):
        """Test AppInstallStack"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
