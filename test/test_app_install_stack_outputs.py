# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nuon.models.app_install_stack_outputs import AppInstallStackOutputs

class TestAppInstallStackOutputs(unittest.TestCase):
    """AppInstallStackOutputs unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppInstallStackOutputs:
        """Test AppInstallStackOutputs
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppInstallStackOutputs`
        """
        model = AppInstallStackOutputs()
        if include_optional:
            return AppInstallStackOutputs(
                aws = nuon.models.app/aws_stack_outputs.app.AWSStackOutputs(
                    account_id = '', 
                    deprovision_iam_role_arn = '', 
                    maintenance_iam_role_arn = '', 
                    private_subnets = [
                        ''
                        ], 
                    provision_iam_role_arn = '', 
                    public_subnets = [
                        ''
                        ], 
                    region = '', 
                    runner_iam_role_arn = '', 
                    runner_subnet = '', 
                    vpc_id = '', ),
                azure = nuon.models.app/azure_stack_outputs.app.AzureStackOutputs(
                    key_vault_id = '', 
                    key_vault_name = '', 
                    network_id = '', 
                    network_name = '', 
                    private_subnet_ids = [
                        ''
                        ], 
                    private_subnet_names = [
                        ''
                        ], 
                    public_subnet_ids = [
                        ''
                        ], 
                    public_subnet_names = [
                        ''
                        ], 
                    resource_group_id = '', 
                    resource_group_location = '', 
                    resource_group_name = '', 
                    subscription_id = '', 
                    subscription_tenant_id = '', ),
                created_at = '',
                created_by_id = '',
                data = {
                    'key' : ''
                    },
                id = '',
                install_stack_id = '',
                install_version_run_id = '',
                org_id = '',
                updated_at = ''
            )
        else:
            return AppInstallStackOutputs(
        )
        """

    def testAppInstallStackOutputs(self):
        """Test AppInstallStackOutputs"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
