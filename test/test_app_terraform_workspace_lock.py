# coding: utf-8

"""
    Nuon

    API for managing nuon apps, components, installs, and actions.

    The version of the OpenAPI document: cc3796a
    Contact: support@nuon.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nuon.models.app_terraform_workspace_lock import AppTerraformWorkspaceLock

class TestAppTerraformWorkspaceLock(unittest.TestCase):
    """AppTerraformWorkspaceLock unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AppTerraformWorkspaceLock:
        """Test AppTerraformWorkspaceLock
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AppTerraformWorkspaceLock`
        """
        model = AppTerraformWorkspaceLock()
        if include_optional:
            return AppTerraformWorkspaceLock(
                created_at = '',
                created_by_id = '',
                id = '',
                lock = nuon.models.app/terraform_lock.app.TerraformLock(
                    created = '', 
                    id = '', 
                    info = '', 
                    operation = '', 
                    path = '', 
                    version = null, 
                    who = '', ),
                runner_job = nuon.models.app/runner_job.app.RunnerJob(
                    available_timeout = 56, 
                    created_at = '', 
                    created_by_id = '', 
                    execution_count = 56, 
                    execution_time = 56, 
                    execution_timeout = 56, 
                    executions = [
                        nuon.models.app/runner_job_execution.app.RunnerJobExecution(
                            created_at = '', 
                            created_by_id = '', 
                            id = '', 
                            org_id = '', 
                            outputs = nuon.models.app/runner_job_execution_outputs.app.RunnerJobExecutionOutputs(
                                created_at = '', 
                                created_by_id = '', 
                                id = '', 
                                org_id = '', 
                                outputs_json = '', 
                                runner_job_execution_id = '', 
                                updated_at = '', ), 
                            result = nuon.models.app/runner_job_execution_result.app.RunnerJobExecutionResult(
                                contents = '', 
                                contents_display = '', 
                                contents_display_gzip = '', 
                                contents_gzip = '', 
                                created_at = '', 
                                created_by_id = '', 
                                error_code = 56, 
                                error_metadata = {
                                    'key' : ''
                                    }, 
                                id = '', 
                                org_id = '', 
                                runner_job_execution_id = '', 
                                success = True, 
                                updated_at = '', ), 
                            runner_job_id = '', 
                            status = 'pending', 
                            updated_at = '', )
                        ], 
                    final_runner_job_execution_id = '', 
                    finished_at = '', 
                    group = 'health-checks', 
                    id = '', 
                    log_stream_id = '', 
                    max_executions = 56, 
                    metadata = {
                        'key' : ''
                        }, 
                    operation = 'exec', 
                    org_id = '', 
                    outputs = { }, 
                    outputs_json = '', 
                    overall_timeout = 56, 
                    owner_id = '', 
                    owner_type = '', 
                    queue_timeout = 56, 
                    runner_id = '', 
                    started_at = '', 
                    status = 'queued', 
                    status_description = '', 
                    type = 'health-check', 
                    updated_at = '', ),
                runner_job_id = '',
                updated_at = '',
                workspace_id = ''
            )
        else:
            return AppTerraformWorkspaceLock(
        )
        """

    def testAppTerraformWorkspaceLock(self):
        """Test AppTerraformWorkspaceLock"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
