"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from nuon.types import BaseModel
from nuon.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    SecurityMetadata,
)
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class LogStreamReadLogsSecurityTypedDict(TypedDict):
    api_key: NotRequired[str]
    org_id: NotRequired[str]


class LogStreamReadLogsSecurity(BaseModel):
    api_key: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="apiKey",
                sub_type="header",
                field_name="Authorization",
            )
        ),
    ] = None

    org_id: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="apiKey",
                sub_type="header",
                field_name="X-Nuon-Org-ID",
            )
        ),
    ] = None


class LogStreamReadLogsRequestTypedDict(TypedDict):
    log_stream_id: str
    r"""log stream ID"""
    x_nuon_api_offset: str
    r"""log stream offset"""


class LogStreamReadLogsRequest(BaseModel):
    log_stream_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""log stream ID"""

    x_nuon_api_offset: Annotated[
        str,
        pydantic.Field(alias="X-Nuon-API-Offset"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]
    r"""log stream offset"""
