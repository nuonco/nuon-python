"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .app_runnerjobexecution import (
    AppRunnerJobExecution,
    AppRunnerJobExecutionTypedDict,
)
from .app_runnerjobgroup import AppRunnerJobGroup
from .app_runnerjoboperationtype import AppRunnerJobOperationType
from .app_runnerjobstatus import AppRunnerJobStatus
from .app_runnerjobtype import AppRunnerJobType
from nuon.types import BaseModel
from typing import Any, Dict, List, Optional
from typing_extensions import NotRequired, TypedDict


class AppRunnerJobTypedDict(TypedDict):
    available_timeout: NotRequired[int]
    r"""available timeout is how long a job can be marked as \"available\" before being requeued"""
    created_at: NotRequired[str]
    created_by_id: NotRequired[str]
    execution_count: NotRequired[int]
    execution_time: NotRequired[int]
    execution_timeout: NotRequired[int]
    r"""execution timeout is how long a job can be marked as \"exeucuting\" before being requeued"""
    executions: NotRequired[List[AppRunnerJobExecutionTypedDict]]
    final_runner_job_execution_id: NotRequired[str]
    finished_at: NotRequired[str]
    group: NotRequired[AppRunnerJobGroup]
    id: NotRequired[str]
    log_stream_id: NotRequired[str]
    max_executions: NotRequired[int]
    metadata: NotRequired[Dict[str, str]]
    operation: NotRequired[AppRunnerJobOperationType]
    org_id: NotRequired[str]
    outputs: NotRequired[Dict[str, Any]]
    outputs_json: NotRequired[str]
    overall_timeout: NotRequired[int]
    r"""overall timeout is how long a job can be attempted, before being cancelled"""
    owner_id: NotRequired[str]
    owner_type: NotRequired[str]
    queue_timeout: NotRequired[int]
    r"""queue timeout is how long a job can be queued, before being made available"""
    runner_id: NotRequired[str]
    started_at: NotRequired[str]
    status: NotRequired[AppRunnerJobStatus]
    status_description: NotRequired[str]
    type: NotRequired[AppRunnerJobType]
    updated_at: NotRequired[str]


class AppRunnerJob(BaseModel):
    available_timeout: Optional[int] = None
    r"""available timeout is how long a job can be marked as \"available\" before being requeued"""

    created_at: Optional[str] = None

    created_by_id: Optional[str] = None

    execution_count: Optional[int] = None

    execution_time: Optional[int] = None

    execution_timeout: Optional[int] = None
    r"""execution timeout is how long a job can be marked as \"exeucuting\" before being requeued"""

    executions: Optional[List[AppRunnerJobExecution]] = None

    final_runner_job_execution_id: Optional[str] = None

    finished_at: Optional[str] = None

    group: Optional[AppRunnerJobGroup] = None

    id: Optional[str] = None

    log_stream_id: Optional[str] = None

    max_executions: Optional[int] = None

    metadata: Optional[Dict[str, str]] = None

    operation: Optional[AppRunnerJobOperationType] = None

    org_id: Optional[str] = None

    outputs: Optional[Dict[str, Any]] = None

    outputs_json: Optional[str] = None

    overall_timeout: Optional[int] = None
    r"""overall timeout is how long a job can be attempted, before being cancelled"""

    owner_id: Optional[str] = None

    owner_type: Optional[str] = None

    queue_timeout: Optional[int] = None
    r"""queue timeout is how long a job can be queued, before being made available"""

    runner_id: Optional[str] = None

    started_at: Optional[str] = None

    status: Optional[AppRunnerJobStatus] = None

    status_description: Optional[str] = None

    type: Optional[AppRunnerJobType] = None

    updated_at: Optional[str] = None
