"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from nuon.types import BaseModel
from nuon.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    SecurityMetadata,
)
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetAppInstallsSecurityTypedDict(TypedDict):
    api_key: NotRequired[str]
    org_id: NotRequired[str]


class GetAppInstallsSecurity(BaseModel):
    api_key: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="apiKey",
                sub_type="header",
                field_name="Authorization",
            )
        ),
    ] = None

    org_id: Annotated[
        Optional[str],
        FieldMetadata(
            security=SecurityMetadata(
                scheme=True,
                scheme_type="apiKey",
                sub_type="header",
                field_name="X-Nuon-Org-ID",
            )
        ),
    ] = None


class GetAppInstallsRequestTypedDict(TypedDict):
    app_id: str
    r"""app ID"""
    q: NotRequired[str]
    r"""search query"""
    offset: NotRequired[int]
    r"""offset of results to return"""
    limit: NotRequired[int]
    r"""limit of results to return"""
    page: NotRequired[int]
    r"""page number of results to return"""
    x_nuon_pagination_enabled: NotRequired[bool]
    r"""Enable pagination"""


class GetAppInstallsRequest(BaseModel):
    app_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""app ID"""

    q: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""search query"""

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""offset of results to return"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 10
    r"""limit of results to return"""

    page: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""page number of results to return"""

    x_nuon_pagination_enabled: Annotated[
        Optional[bool],
        pydantic.Field(alias="x-nuon-pagination-enabled"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Enable pagination"""
