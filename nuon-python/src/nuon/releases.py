"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from nuon import errors, models, utils
from nuon._hooks import HookContext
from nuon.types import OptionalNullable, UNSET
from nuon.utils import get_security_from_env
from nuon.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, List, Mapping, Optional, Union


class Releases(BaseSDK):
    r"""releases"""

    def get_app_releases(
        self,
        *,
        security: Union[
            models.GetAppReleasesSecurity, models.GetAppReleasesSecurityTypedDict
        ],
        app_id: str,
        offset: Optional[int] = 0,
        limit: Optional[int] = 10,
        page: Optional[int] = 0,
        x_nuon_pagination_enabled: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.AppComponentRelease]:
        r"""get all releases for an app

        :param security:
        :param app_id: app ID
        :param offset: offset of results to return
        :param limit: limit of results to return
        :param page: page number of results to return
        :param x_nuon_pagination_enabled: Enable pagination
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetAppReleasesRequest(
            app_id=app_id,
            offset=offset,
            limit=limit,
            page=page,
            x_nuon_pagination_enabled=x_nuon_pagination_enabled,
        )

        req = self._build_request(
            method="GET",
            path="/v1/apps/{app_id}/releases",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.GetAppReleasesSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetAppReleases",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(List[models.AppComponentRelease], http_res)
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)

        raise errors.NuonDefaultError("Unexpected response received", http_res)

    async def get_app_releases_async(
        self,
        *,
        security: Union[
            models.GetAppReleasesSecurity, models.GetAppReleasesSecurityTypedDict
        ],
        app_id: str,
        offset: Optional[int] = 0,
        limit: Optional[int] = 10,
        page: Optional[int] = 0,
        x_nuon_pagination_enabled: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.AppComponentRelease]:
        r"""get all releases for an app

        :param security:
        :param app_id: app ID
        :param offset: offset of results to return
        :param limit: limit of results to return
        :param page: page number of results to return
        :param x_nuon_pagination_enabled: Enable pagination
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetAppReleasesRequest(
            app_id=app_id,
            offset=offset,
            limit=limit,
            page=page,
            x_nuon_pagination_enabled=x_nuon_pagination_enabled,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/apps/{app_id}/releases",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.GetAppReleasesSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetAppReleases",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(List[models.AppComponentRelease], http_res)
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)

        raise errors.NuonDefaultError("Unexpected response received", http_res)

    def get_component_releases(
        self,
        *,
        security: Union[
            models.GetComponentReleasesSecurity,
            models.GetComponentReleasesSecurityTypedDict,
        ],
        component_id: str,
        offset: Optional[int] = 0,
        limit: Optional[int] = 10,
        page: Optional[int] = 0,
        x_nuon_pagination_enabled: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.AppComponentRelease]:
        r"""get all releases for a component

        :param security:
        :param component_id: component ID
        :param offset: offset of results to return
        :param limit: limit of results to return
        :param page: page number of results to return
        :param x_nuon_pagination_enabled: Enable pagination
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetComponentReleasesRequest(
            component_id=component_id,
            offset=offset,
            limit=limit,
            page=page,
            x_nuon_pagination_enabled=x_nuon_pagination_enabled,
        )

        req = self._build_request(
            method="GET",
            path="/v1/components/{component_id}/releases",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetComponentReleasesSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetComponentReleases",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(List[models.AppComponentRelease], http_res)
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)

        raise errors.NuonDefaultError("Unexpected response received", http_res)

    async def get_component_releases_async(
        self,
        *,
        security: Union[
            models.GetComponentReleasesSecurity,
            models.GetComponentReleasesSecurityTypedDict,
        ],
        component_id: str,
        offset: Optional[int] = 0,
        limit: Optional[int] = 10,
        page: Optional[int] = 0,
        x_nuon_pagination_enabled: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.AppComponentRelease]:
        r"""get all releases for a component

        :param security:
        :param component_id: component ID
        :param offset: offset of results to return
        :param limit: limit of results to return
        :param page: page number of results to return
        :param x_nuon_pagination_enabled: Enable pagination
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetComponentReleasesRequest(
            component_id=component_id,
            offset=offset,
            limit=limit,
            page=page,
            x_nuon_pagination_enabled=x_nuon_pagination_enabled,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/components/{component_id}/releases",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.GetComponentReleasesSecurity
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetComponentReleases",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(List[models.AppComponentRelease], http_res)
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)

        raise errors.NuonDefaultError("Unexpected response received", http_res)

    def create_component_release(
        self,
        *,
        security: Union[
            models.CreateComponentReleaseSecurity,
            models.CreateComponentReleaseSecurityTypedDict,
        ],
        component_id: str,
        auto_build: Optional[bool] = None,
        build_id: Optional[str] = None,
        install_ids: Optional[List[str]] = None,
        strategy: Optional[Union[models.Strategy, models.StrategyTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AppComponentRelease:
        r"""create a release

        :param security:
        :param component_id: component ID
        :param auto_build:
        :param build_id:
        :param install_ids:
        :param strategy:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateComponentReleaseRequest(
            component_id=component_id,
            service_create_component_release_request=models.ServiceCreateComponentReleaseRequest(
                auto_build=auto_build,
                build_id=build_id,
                install_ids=install_ids,
                strategy=utils.get_pydantic_model(strategy, Optional[models.Strategy]),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/v1/components/{component_id}/releases",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.CreateComponentReleaseSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.service_create_component_release_request,
                False,
                False,
                "json",
                models.ServiceCreateComponentReleaseRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="CreateComponentRelease",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "201", "application/json"):
            return unmarshal_json_response(models.AppComponentRelease, http_res)
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)

        raise errors.NuonDefaultError("Unexpected response received", http_res)

    async def create_component_release_async(
        self,
        *,
        security: Union[
            models.CreateComponentReleaseSecurity,
            models.CreateComponentReleaseSecurityTypedDict,
        ],
        component_id: str,
        auto_build: Optional[bool] = None,
        build_id: Optional[str] = None,
        install_ids: Optional[List[str]] = None,
        strategy: Optional[Union[models.Strategy, models.StrategyTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AppComponentRelease:
        r"""create a release

        :param security:
        :param component_id: component ID
        :param auto_build:
        :param build_id:
        :param install_ids:
        :param strategy:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateComponentReleaseRequest(
            component_id=component_id,
            service_create_component_release_request=models.ServiceCreateComponentReleaseRequest(
                auto_build=auto_build,
                build_id=build_id,
                install_ids=install_ids,
                strategy=utils.get_pydantic_model(strategy, Optional[models.Strategy]),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/v1/components/{component_id}/releases",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(
                security, models.CreateComponentReleaseSecurity
            ),
            get_serialized_body=lambda: utils.serialize_request_body(
                request.service_create_component_release_request,
                False,
                False,
                "json",
                models.ServiceCreateComponentReleaseRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="CreateComponentRelease",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "201", "application/json"):
            return unmarshal_json_response(models.AppComponentRelease, http_res)
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)

        raise errors.NuonDefaultError("Unexpected response received", http_res)

    def get_release(
        self,
        *,
        security: Union[models.GetReleaseSecurity, models.GetReleaseSecurityTypedDict],
        release_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AppComponentRelease:
        r"""get a release

        :param security:
        :param release_id: release ID
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetReleaseRequest(
            release_id=release_id,
        )

        req = self._build_request(
            method="GET",
            path="/v1/releases/{release_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.GetReleaseSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetRelease",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.AppComponentRelease, http_res)
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)

        raise errors.NuonDefaultError("Unexpected response received", http_res)

    async def get_release_async(
        self,
        *,
        security: Union[models.GetReleaseSecurity, models.GetReleaseSecurityTypedDict],
        release_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AppComponentRelease:
        r"""get a release

        :param security:
        :param release_id: release ID
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetReleaseRequest(
            release_id=release_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/releases/{release_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.GetReleaseSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetRelease",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.AppComponentRelease, http_res)
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)

        raise errors.NuonDefaultError("Unexpected response received", http_res)

    def get_release_steps(
        self,
        *,
        security: Union[
            models.GetReleaseStepsSecurity, models.GetReleaseStepsSecurityTypedDict
        ],
        release_id: str,
        offset: Optional[int] = 0,
        limit: Optional[int] = 10,
        page: Optional[int] = 0,
        x_nuon_pagination_enabled: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.AppComponentReleaseStep]:
        r"""get a release

        :param security:
        :param release_id: release ID
        :param offset: offset of results to return
        :param limit: limit of results to return
        :param page: page number of results to return
        :param x_nuon_pagination_enabled: Enable pagination
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetReleaseStepsRequest(
            release_id=release_id,
            offset=offset,
            limit=limit,
            page=page,
            x_nuon_pagination_enabled=x_nuon_pagination_enabled,
        )

        req = self._build_request(
            method="GET",
            path="/v1/releases/{release_id}/steps",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.GetReleaseStepsSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetReleaseSteps",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                List[models.AppComponentReleaseStep], http_res
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)

        raise errors.NuonDefaultError("Unexpected response received", http_res)

    async def get_release_steps_async(
        self,
        *,
        security: Union[
            models.GetReleaseStepsSecurity, models.GetReleaseStepsSecurityTypedDict
        ],
        release_id: str,
        offset: Optional[int] = 0,
        limit: Optional[int] = 10,
        page: Optional[int] = 0,
        x_nuon_pagination_enabled: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> List[models.AppComponentReleaseStep]:
        r"""get a release

        :param security:
        :param release_id: release ID
        :param offset: offset of results to return
        :param limit: limit of results to return
        :param page: page number of results to return
        :param x_nuon_pagination_enabled: Enable pagination
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetReleaseStepsRequest(
            release_id=release_id,
            offset=offset,
            limit=limit,
            page=page,
            x_nuon_pagination_enabled=x_nuon_pagination_enabled,
        )

        req = self._build_request_async(
            method="GET",
            path="/v1/releases/{release_id}/steps",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=utils.get_pydantic_model(security, models.GetReleaseStepsSecurity),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="GetReleaseSteps",
                oauth2_scopes=None,
                security_source=get_security_from_env(security, models.Security),
            ),
            request=req,
            error_status_codes=["400", "401", "403", "404", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                List[models.AppComponentReleaseStep], http_res
            )
        if utils.match_response(
            http_res, ["400", "401", "403", "404"], "application/json"
        ):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            response_data = unmarshal_json_response(
                errors.StderrErrResponseErrorData, http_res
            )
            raise errors.StderrErrResponseError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.NuonDefaultError("API error occurred", http_res, http_res_text)

        raise errors.NuonDefaultError("Unexpected response received", http_res)
